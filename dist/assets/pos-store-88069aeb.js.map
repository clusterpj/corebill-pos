{"version":3,"file":"pos-store-88069aeb.js","sources":["../../src/stores/pos/state.js","../../src/services/api/section-api.ts","../../src/stores/pos/products.js","../../src/stores/pos/orders.js","../../src/stores/pos/getters.js","../../src/stores/pos/actions.js","../../src/stores/pos-store.js"],"sourcesContent":["import { ref } from 'vue'\r\n\r\nexport const createPosState = () => {\r\n  const loading = ref({\r\n    categories: false,\r\n    products: false,\r\n    stores: false,\r\n    cashiers: false,\r\n    employees: false,\r\n    itemOperation: false,\r\n    holdInvoices: false,\r\n    conversion: false,\r\n    updating: false\r\n  })\r\n  const error = ref(null)\r\n  const categories = ref([])\r\n  const products = ref([])\r\n  const selectedCategory = ref('all')\r\n  const searchQuery = ref('')\r\n  const currentPage = ref(1)\r\n  const itemsPerPage = ref(20)\r\n  const totalItems = ref(0)\r\n  const stores = ref([])\r\n  const cashiers = ref([])\r\n  const employees = ref([])\r\n  const holdInvoices = ref([])\r\n  const activeOrderType = ref(null)\r\n  const selectedTable = ref(null)\r\n  const orderReference = ref('')\r\n  const customerInfo = ref(null)\r\n  const isTableMode = ref(false)\r\n  \r\n  // New hold invoice specific state\r\n  const holdInvoiceSettings = ref({\r\n    template_id: 1,\r\n    print_settings: {\r\n      print_pdf: false,\r\n      is_invoice_pos: 1,\r\n      is_pdf_pos: true\r\n    },\r\n    avalara_bool: false,\r\n    banType: true,\r\n    invoice_pbx_modify: 0,\r\n    taxes: {},\r\n    packages: []\r\n  })\r\n\r\n  return {\r\n    loading,\r\n    error,\r\n    categories,\r\n    products,\r\n    selectedCategory,\r\n    searchQuery,\r\n    currentPage,\r\n    itemsPerPage,\r\n    totalItems,\r\n    stores,\r\n    cashiers,\r\n    employees,\r\n    holdInvoices,\r\n    activeOrderType,\r\n    selectedTable,\r\n    orderReference,\r\n    customerInfo,\r\n    isTableMode,\r\n    holdInvoiceSettings\r\n  }\r\n}\r\n","import apiClient from './client'\r\nimport { logger } from '@/utils/logger'\r\nimport { errorHandler } from '@/utils/errorHandler'\r\nimport { SectionType } from '@/types/enums'\r\n\r\nexport interface Section {\r\n  id: number\r\n  name: string\r\n  type: SectionType\r\n  description?: string\r\n}\r\n\r\nexport interface SectionItem {\r\n  id: number\r\n  section_id: number\r\n  name: string\r\n  price: number\r\n  description?: string\r\n}\r\n\r\nexport interface SectionResponse {\r\n  success: boolean\r\n  message: string\r\n  sections: Section[]\r\n}\r\n\r\nexport const sectionApi = {\r\n  /**\r\n   * Retrieve all sections\r\n   * @param limit 'all' or number\r\n   * @returns Promise<Section[]>\r\n   */\r\n  async getAllSections(limit: 'all' | number = 'all'): Promise<Section[]> {\r\n    try {\r\n      const response = await apiClient.get<SectionResponse>('/v1/core-pos/sections', {\r\n        params: { limit }\r\n      })\r\n      logger.debug('[SectionAPI] Fetched all sections:', response.data)\r\n      return response.data?.sections || []\r\n    } catch (error) {\r\n      throw errorHandler.handleApi(error, '[SectionAPI] getAllSections')\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get sections for a specific item\r\n   * @param itemId \r\n   * @returns Promise<Section[]>\r\n   */\r\n  async getSectionsForItem(itemId: number): Promise<Section[]> {\r\n    try {\r\n      const response = await apiClient.get<SectionResponse>(`/v1/core-pos/sections/getsections/${itemId}`)\r\n      logger.debug(`[SectionAPI] Raw response for item ${itemId}:`, response.data)\r\n      return response.data?.sections || []\r\n    } catch (error) {\r\n      throw errorHandler.handleApi(error, `[SectionAPI] getSectionsForItem(${itemId})`)\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Get items for a specific section\r\n   * @param sectionId \r\n   * @returns Promise<SectionItem[]>\r\n   */\r\n  async getItemsForSection(sectionId: number): Promise<SectionItem[]> {\r\n    try {\r\n      const response = await apiClient.get(`/v1/core-pos/sections/getitems/${sectionId}`)\r\n      logger.debug(`[SectionAPI] Items for section ${sectionId}:`, response.data)\r\n      return response.data?.data || []\r\n    } catch (error) {\r\n      throw errorHandler.handleApi(error, `[SectionAPI] getItemsForSection(${sectionId})`)\r\n    }\r\n  }\r\n}\r\n","import { logger } from '../../utils/logger'\nimport { sectionApi } from '../../services/api/section-api'\n\nexport const createProductsModule = (state, posApi, companyStore) => {\n  const fetchCategories = async () => {\n    if (!companyStore.isConfigured) {\n      logger.warn('Company configuration incomplete, skipping categories fetch')\n      return\n    }\n\n    logger.startGroup('POS Store: Fetch Categories')\n    state.loading.value.categories = true\n    state.error.value = null\n    \n    try {\n      const response = await posApi.getItemCategories()\n      \n      if (response.success) {\n        state.categories.value = Array.isArray(response.data) ? response.data : []\n        logger.info(`Loaded ${state.categories.value.length} categories`)\n        \n        if (state.categories.value.length > 0) {\n          logger.info('Categories loaded, fetching products')\n          await fetchProducts()\n        } else {\n          logger.warn('No categories available')\n        }\n      } else {\n        logger.warn('Failed to load categories', response.error)\n        state.categories.value = []\n      }\n    } catch (error) {\n      logger.error('Failed to fetch categories', error)\n      state.error.value = error.message || 'Failed to load categories'\n      state.categories.value = []\n    } finally {\n      state.loading.value.categories = false\n      logger.endGroup()\n    }\n  }\n\n  const fetchProducts = async () => {\n    if (!companyStore.isConfigured) {\n      logger.warn('Company configuration incomplete, skipping products fetch')\n      return\n    }\n\n    logger.startGroup('POS Store: Fetch Products')\n    state.loading.value.products = true\n    state.error.value = null\n    \n    try {\n      // First fetch all sections to have them available\n      logger.debug('[Products] Fetching all sections')\n      const allSections = await sectionApi.getAllSections('all')\n      logger.debug('[Products] All sections:', allSections)\n      \n      // Create a map of section ID to section for quick lookup\n      const sectionsMap = {}\n      allSections.forEach(section => {\n        sectionsMap[section.id] = section\n      })\n      \n      // Now fetch products\n      const categoryIds = state.selectedCategory.value === 'all'\n        ? state.categories.value.map(c => c.item_category_id)\n        : [state.selectedCategory.value]\n\n      const params = {\n        search: state.searchQuery.value,\n        categories_id: categoryIds,\n        avalara_bool: false,\n        is_pos: 1,\n        id: companyStore.selectedStore,\n        limit: state.itemsPerPage.value,\n        page: state.currentPage.value,\n        sku: state.searchQuery.value\n      }\n\n      logger.debug('[Products] Fetch products params:', params)\n      const response = await posApi.getItems(params)\n      \n      if (response.items?.data) {\n        const products = Array.isArray(response.items.data) ? response.items.data : []\n        \n        // Fetch section information for each product\n        await Promise.all(products.map(async (product) => {\n          try {\n            logger.debug(`[Products] Fetching sections for product ${product.id}`)\n            const sections = await sectionApi.getSectionsForItem(product.id)\n            logger.debug(`[Products] Received sections for product ${product.id}:`, sections)\n            \n            if (sections && sections.length > 0) {\n              const section = sections[0] // Get the first section\n              logger.debug(`[Products] Using section for product ${product.id}:`, section)\n              \n              if (section && section.id) {\n                // Create a new product object with section information\n                Object.assign(product, {\n                  section_id: section.id,\n                  section_type: 'bar', // Default to 'bar' if section.name is 'BAR', otherwise 'kitchen'\n                  section_name: section.name\n                })\n                \n                // Update section type based on section name\n                if (section.name.toUpperCase() === 'BAR') {\n                  product.section_type = 'bar'\n                } else if (section.name.toUpperCase() === 'KITCHEN') {\n                  product.section_type = 'kitchen'\n                }\n                \n                logger.debug(`[Products] Updated product ${product.id} with section:`, { \n                  id: product.id,\n                  name: product.name,\n                  section: {\n                    id: product.section_id,\n                    type: product.section_type,\n                    name: product.section_name\n                  }\n                })\n              } else {\n                logger.debug(`[Products] Invalid section data for product ${product.id}`)\n                setDefaultSection(product)\n              }\n            } else {\n              logger.debug(`[Products] No sections found for product ${product.id}`)\n              setDefaultSection(product)\n            }\n          } catch (error) {\n            logger.error(`[Products] Failed to fetch section for product ${product.id}:`, error)\n            setDefaultSection(product)\n          }\n        }))\n        \n        // Store the sections map in state for future use\n        state.sectionsMap = sectionsMap\n        \n        state.products.value = products\n        state.totalItems.value = response.itemTotalCount || 0\n        logger.info(`[Products] Loaded ${products.length} products with section information`)\n      } else {\n        logger.warn('No products data in response', response)\n        state.products.value = []\n        state.totalItems.value = 0\n      }\n    } catch (error) {\n      logger.error('Failed to fetch products', error)\n      state.error.value = error.message || 'Failed to load products'\n      state.products.value = []\n      state.totalItems.value = 0\n    } finally {\n      state.loading.value.products = false\n      logger.endGroup()\n    }\n  }\n\n  const setDefaultSection = (product) => {\n    Object.assign(product, {\n      section_id: null,\n      section_type: 'other',\n      section_name: 'Default'\n    })\n    logger.debug(`[Products] Set default section for product ${product.id}`)\n  }\n\n  const setCategory = async (categoryId) => {\n    state.selectedCategory.value = categoryId\n    state.currentPage.value = 1\n    await fetchProducts()\n  }\n\n  const createItem = async (itemData) => {\n    logger.startGroup('POS Store: Create Item')\n    state.loading.value.itemOperation = true\n    state.error.value = null\n\n    try {\n      const response = await posApi.createItem(itemData)\n      logger.info('Item created successfully:', response)\n      await fetchProducts() // Refresh the list\n      return response\n    } catch (error) {\n      logger.error('Failed to create item:', error)\n      state.error.value = error.message\n      throw error\n    } finally {\n      state.loading.value.itemOperation = false\n      logger.endGroup()\n    }\n  }\n\n  const updateItem = async (itemId, itemData) => {\n    logger.startGroup('POS Store: Update Item')\n    state.loading.value.itemOperation = true\n    state.error.value = null\n\n    try {\n      const response = await posApi.updateItem(itemId, itemData)\n      logger.info('Item updated successfully:', response)\n      await fetchProducts() // Refresh the list\n      return response\n    } catch (error) {\n      logger.error('Failed to update item:', error)\n      state.error.value = error.message\n      throw error\n    } finally {\n      state.loading.value.itemOperation = false\n      logger.endGroup()\n    }\n  }\n\n  return {\n    fetchCategories,\n    fetchProducts,\n    setCategory,\n    createItem,\n    updateItem\n  }\n}\n","import { logger } from '../../utils/logger'\r\nimport { OrderType, PaidStatus } from '../../types/order'\r\nimport { PriceUtils } from '../../utils/price' // Import PriceUtils\r\n\r\nconst STORAGE_KEY = 'core_pos_hold_invoices'\r\n\r\nexport const createOrdersModule = (state, posApi, posOperations) => {\r\n  // Add hold invoice tracking properties to state\r\n  state.currentHoldInvoiceId = null\r\n  state.currentHoldInvoiceDescription = null\r\n  // Initialize hold invoices from localStorage\r\n  const initializeHoldInvoices = () => {\r\n    try {\r\n      const storedInvoices = localStorage.getItem(STORAGE_KEY)\r\n      if (storedInvoices) {\r\n        state.holdInvoices.value = JSON.parse(storedInvoices)\r\n        logger.info('Initialized hold invoices from localStorage:', state.holdInvoices.value.length)\r\n      }\r\n    } catch (error) {\r\n      logger.error('Failed to initialize hold invoices from localStorage:', error)\r\n    }\r\n  }\r\n\r\n  // Update localStorage with current hold invoices\r\n  const persistHoldInvoices = () => {\r\n    try {\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(state.holdInvoices.value))\r\n      logger.debug('Persisted hold invoices to localStorage')\r\n    } catch (error) {\r\n      logger.error('Failed to persist hold invoices to localStorage:', error)\r\n    }\r\n  }\r\n\r\n  const validateHoldInvoiceData = (data) => {\r\n    const required = [\r\n      'items',\r\n      'total',\r\n      'sub_total',\r\n      'due_amount',\r\n      'user_id',\r\n      'store_id',\r\n      'cash_register_id',\r\n      'type',\r\n      'paid_status'\r\n    ]\r\n    \r\n    const missing = required.filter(field => !data[field])\r\n    if (missing.length) {\r\n      throw new Error(`Missing required fields: ${missing.join(', ')}`)\r\n    }\r\n    \r\n    if (!Array.isArray(data.items) || !data.items.length) {\r\n      throw new Error('Items array is required and must not be empty')\r\n    }\r\n    \r\n    data.items.forEach((item, index) => {\r\n      if (!item.price || !item.quantity) {\r\n        throw new Error(`Invalid item at index ${index}: missing price or quantity`)\r\n      }\r\n    })\r\n\r\n    // Validate type\r\n    if (!Object.values(OrderType).includes(data.type)) {\r\n      throw new Error(`Invalid order type: ${data.type}. Must be one of: ${Object.values(OrderType).join(', ')}`)\r\n    }\r\n\r\n    // Validate paid_status\r\n    if (!Object.values(PaidStatus).includes(data.paid_status)) {\r\n      throw new Error(`Invalid paid status: ${data.paid_status}. Must be either PAID or UNPAID`)\r\n    }\r\n  }\r\n\r\n  const prepareHoldInvoiceData = (orderData) => {\r\n    const { holdInvoiceSettings } = state\r\n    const currentDate = new Date()\r\n    const dueDate = new Date(currentDate.getTime() + 7 * 24 * 60 * 60 * 1000)\r\n\r\n    return {\r\n      ...orderData,\r\n      ...holdInvoiceSettings.value.print_settings,\r\n      avalara_bool: holdInvoiceSettings.value.avalara_bool,\r\n      invoice_template_id: holdInvoiceSettings.value.template_id,\r\n      banType: holdInvoiceSettings.value.banType,\r\n      invoice_pbx_modify: holdInvoiceSettings.value.invoice_pbx_modify,\r\n      taxes: holdInvoiceSettings.value.taxes,\r\n      packages: holdInvoiceSettings.value.packages,\r\n      invoice_date: currentDate.toISOString().split('T')[0],\r\n      due_date: dueDate.toISOString().split('T')[0],\r\n      items: orderData.items.map(item => ({\r\n        ...item,\r\n        // Use PriceUtils to handle both dollar and cent amounts\r\n        price: PriceUtils.ensureCents(item.price),\r\n        total: PriceUtils.ensureCents(item.total),\r\n        unit_name: item.unit_name || 'N/A',\r\n        discount_type: 'fixed',\r\n        discount: '0.00',\r\n        discount_val: 0,\r\n        sub_total: PriceUtils.ensureCents(item.total)\r\n      }))\r\n    }\r\n  }\r\n\r\n  const holdOrder = async (orderData) => {\r\n    logger.startGroup('Orders Module: Hold Order')\r\n    state.loading.value.holdInvoices = true\r\n    state.error.value = null\r\n\r\n    try {\r\n      validateHoldInvoiceData(orderData)\r\n      const formattedData = prepareHoldInvoiceData(orderData)\r\n      \r\n      logger.debug('Holding order with data:', formattedData)\r\n      const response = await posApi.holdInvoice.create(formattedData)\r\n      \r\n      if (response.success) {\r\n        await fetchHoldInvoices() // Refresh the list\r\n        logger.info('Order held successfully:', response.data)\r\n        return { success: true, data: response.data }\r\n      }\r\n      \r\n      throw new Error(response.message || 'Failed to hold order')\r\n    } catch (error) {\r\n      logger.error('Failed to hold order:', error)\r\n      state.error.value = error.message\r\n      return { success: false, error: error.message }\r\n    } finally {\r\n      state.loading.value.holdInvoices = false\r\n      logger.endGroup()\r\n    }\r\n  }\r\n\r\n  const updateHoldInvoice = async (description, orderData) => {\r\n    logger.startGroup('Orders Module: Update Hold Invoice')\r\n    state.loading.value.holdInvoices = true\r\n    state.error.value = null\r\n\r\n    try {\r\n      if (!description) {\r\n        throw new Error('Order description is required for update')\r\n      }\r\n\r\n      validateHoldInvoiceData(orderData)\r\n      const formattedData = prepareHoldInvoiceData(orderData)\r\n      \r\n      logger.debug('Updating hold invoice with data:', formattedData)\r\n      const response = await posApi.holdInvoice.update(description, {\r\n        ...formattedData,\r\n        print_pdf: false,\r\n        is_invoice_pos: 1,\r\n        is_pdf_pos: true,\r\n        send_email: false,\r\n        save_as_draft: false,\r\n        not_charge_automatically: false,\r\n        package_bool: false,\r\n        invoice_number: \"-\",\r\n        discount_per_item: \"NO\",\r\n        tip_type: null,\r\n        tip: 0,\r\n        tip_val: 0,\r\n        tables_selected: [],\r\n        is_hold_invoice: true\r\n      })\r\n      \r\n      if (response.success) {\r\n        await fetchHoldInvoices() // Refresh the list\r\n        logger.info('Hold invoice updated successfully:', response.data)\r\n        return { success: true, data: response.data }\r\n      }\r\n      \r\n      throw new Error(response.message || 'Failed to update hold invoice')\r\n    } catch (error) {\r\n      logger.error('Failed to update hold invoice:', error)\r\n      state.error.value = error.message\r\n      return { success: false, error: error.message }\r\n    } finally {\r\n      state.loading.value.holdInvoices = false\r\n      logger.endGroup()\r\n    }\r\n  }\r\n\r\n  const updateHoldInvoicePaidStatus = async (id, paidStatus) => {\r\n    logger.startGroup('Orders Module: Update Hold Invoice Paid Status')\r\n    state.loading.value.holdInvoices = true\r\n    state.error.value = null\r\n\r\n    try {\r\n      if (!id) {\r\n        throw new Error('Invoice ID is required')\r\n      }\r\n\r\n      if (!Object.values(PaidStatus).includes(paidStatus)) {\r\n        throw new Error(`Invalid paid status: ${paidStatus}. Must be either PAID or UNPAID`)\r\n      }\r\n\r\n      const response = await posApi.holdInvoice.updatePaidStatus(id, paidStatus)\r\n      \r\n      if (response.success) {\r\n        await fetchHoldInvoices() // Refresh the list\r\n        logger.info('Hold invoice paid status updated successfully:', { id, paidStatus })\r\n        return { success: true, data: response.data }\r\n      }\r\n      \r\n      throw new Error(response.message || 'Failed to update hold invoice paid status')\r\n    } catch (error) {\r\n      logger.error('Failed to update hold invoice paid status:', error)\r\n      state.error.value = error.message\r\n      return { success: false, error: error.message }\r\n    } finally {\r\n      state.loading.value.holdInvoices = false\r\n      logger.endGroup()\r\n    }\r\n  }\r\n\r\n  const fetchHoldInvoices = async () => {\r\n    logger.startGroup('Orders Module: Fetch Hold Invoices')\r\n    state.loading.value.holdInvoices = true\r\n    state.error.value = null\r\n\r\n    try {\r\n      const response = await posApi.holdInvoice.getAll()\r\n      if (response.success && response.data?.hold_invoices) {\r\n        state.holdInvoices.value = response.data.hold_invoices.data || []\r\n        persistHoldInvoices() // Persist to localStorage after successful fetch\r\n        logger.info('Hold invoices fetched successfully:', state.holdInvoices.value.length)\r\n        return { success: true, data: state.holdInvoices.value }\r\n      }\r\n      throw new Error(response.message || 'Failed to fetch hold invoices')\r\n    } catch (error) {\r\n      logger.error('Failed to fetch hold invoices:', error)\r\n      state.error.value = error.message\r\n      return { success: false, error: error.message }\r\n    } finally {\r\n      state.loading.value.holdInvoices = false\r\n      logger.endGroup()\r\n    }\r\n  }\r\n\r\n  const deleteHoldInvoice = async (id) => {\r\n    logger.startGroup('Orders Module: Delete Hold Invoice')\r\n    state.loading.value.holdInvoices = true\r\n    state.error.value = null\r\n\r\n    try {\r\n      const response = await posApi.holdInvoice.delete(id)\r\n      if (response.success) {\r\n        await fetchHoldInvoices() // Refresh the list\r\n        logger.info('Hold invoice deleted successfully:', id)\r\n        return { success: true }\r\n      }\r\n      throw new Error(response.message || 'Failed to delete hold invoice')\r\n    } catch (error) {\r\n      logger.error('Failed to delete hold invoice:', error)\r\n      state.error.value = error.message\r\n      return { success: false, error: error.message }\r\n    } finally {\r\n      state.loading.value.holdInvoices = false\r\n      logger.endGroup()\r\n    }\r\n  }\r\n\r\n  // Initialize hold invoices when module is created\r\n  initializeHoldInvoices()\r\n\r\n  return {\r\n    holdOrder,\r\n    updateHoldInvoice,\r\n    updateHoldInvoicePaidStatus,\r\n    fetchHoldInvoices,\r\n    deleteHoldInvoice,\r\n    \r\n    setHoldInvoiceId(id) {\r\n      state.currentHoldInvoiceId = id\r\n    },\r\n    \r\n    setHoldInvoiceDescription(description) {\r\n      state.currentHoldInvoiceDescription = description  \r\n    },\r\n    \r\n    clearHoldInvoice() {\r\n      state.currentHoldInvoiceId = null\r\n      state.currentHoldInvoiceDescription = null\r\n    }\r\n  }\r\n}\r\n","import { computed } from 'vue'\r\n\r\nexport const createGetters = (state, cartStore, companyStore) => {\r\n  const hasActiveOrder = computed(() => {\r\n    return cartStore.items.length > 0\r\n  })\r\n\r\n  const canPlaceOrder = computed(() => {\r\n    return hasActiveOrder.value && state.activeOrderType.value\r\n  })\r\n\r\n  const categoriesForDisplay = computed(() => {\r\n    return [\r\n      { id: 'all', name: 'All Categories', value: 'all' },\r\n      ...(state.categories.value || []).map(category => ({\r\n        id: category.item_category_id,\r\n        name: category.name,\r\n        value: category.item_category_id\r\n      }))\r\n    ]\r\n  })\r\n\r\n  const systemReady = computed(() => {\r\n    return companyStore.isConfigured\r\n  })\r\n\r\n  const setupMessage = computed(() => {\r\n    if (!companyStore.selectedCustomer) return 'Please select a customer'\r\n    if (!companyStore.selectedStore) return 'Please select a store'\r\n    if (!companyStore.selectedCashier) return 'Please select a cash register'\r\n    return ''\r\n  })\r\n\r\n  return {\r\n    hasActiveOrder,\r\n    canPlaceOrder,\r\n    categoriesForDisplay,\r\n    systemReady,\r\n    setupMessage\r\n  }\r\n}\r\n","export const createActions = (state, cartStore) => {\r\n  const setOrderType = (type) => {\r\n    state.activeOrderType.value = type\r\n  }\r\n\r\n  const setTableSelection = (table) => {\r\n    state.selectedTable.value = table\r\n  }\r\n\r\n  const setOrderReference = (reference) => {\r\n    state.orderReference.value = reference\r\n  }\r\n\r\n  const setCustomerInfo = (info) => {\r\n    state.customerInfo.value = info\r\n  }\r\n\r\n  const toggleTableMode = (value) => {\r\n    state.isTableMode.value = value\r\n  }\r\n\r\n  const resetOrder = () => {\r\n    cartStore.clearCart()\r\n    state.activeOrderType.value = null\r\n    state.selectedTable.value = null\r\n    state.orderReference.value = ''\r\n    state.customerInfo.value = null\r\n  }\r\n\r\n  const resetState = () => {\r\n    state.categories.value = []\r\n    state.products.value = []\r\n    state.selectedCategory.value = 'all'\r\n    state.searchQuery.value = ''\r\n    state.currentPage.value = 1\r\n    state.totalItems.value = 0\r\n    state.error.value = null\r\n    state.holdInvoices.value = []\r\n  }\r\n\r\n  return {\r\n    setOrderType,\r\n    setTableSelection,\r\n    setOrderReference,\r\n    setCustomerInfo,\r\n    toggleTableMode,\r\n    resetOrder,\r\n    resetState\r\n  }\r\n}\r\n","import { defineStore } from 'pinia'\r\nimport { useCartStore } from './cart-store'\r\nimport { usePosApi } from '../services/api/pos-api'\r\nimport { usePosOperations } from '../services/api/pos-operations'\r\nimport { useCompanyStore } from './company'\r\nimport { logger } from '../utils/logger'\r\n\r\nimport { createPosState } from './pos/state'\r\nimport { createProductsModule } from './pos/products'\r\nimport { createOrdersModule } from './pos/orders'\r\nimport { createGetters } from './pos/getters'\r\nimport { createActions } from './pos/actions'\r\n\r\nexport const usePosStore = defineStore('pos', () => {\r\n  const cartStore = useCartStore()\r\n  const companyStore = useCompanyStore()\r\n  const posApi = usePosApi()\r\n  const posOperations = usePosOperations()\r\n\r\n  // Create state\r\n  const state = createPosState()\r\n\r\n  // Create modules\r\n  const productsModule = createProductsModule(state, posApi, companyStore)\r\n  const ordersModule = createOrdersModule(state, posApi, posOperations)\r\n  const getters = createGetters(state, cartStore, companyStore)\r\n  const actions = createActions(state, cartStore)\r\n\r\n  // Initialize function\r\n  const initialize = async () => {\r\n    logger.startGroup('POS Store: Initialize')\r\n    try {\r\n      await companyStore.initializeStore()\r\n      await productsModule.fetchCategories()\r\n      await ordersModule.fetchHoldInvoices()\r\n      logger.info('POS Store initialized successfully')\r\n    } catch (error) {\r\n      logger.error('Failed to initialize POS store', error)\r\n      throw error\r\n    } finally {\r\n      logger.endGroup()\r\n    }\r\n  }\r\n\r\n  return {\r\n    // State\r\n    ...state,\r\n\r\n    // Getters\r\n    ...getters,\r\n\r\n    // Actions\r\n    initialize,\r\n    ...actions,\r\n    ...productsModule,\r\n    ...ordersModule\r\n  }\r\n})\r\n"],"names":["createPosState","loading","ref","error","categories","products","selectedCategory","searchQuery","currentPage","itemsPerPage","totalItems","stores","cashiers","employees","holdInvoices","activeOrderType","selectedTable","orderReference","customerInfo","isTableMode","holdInvoiceSettings","sectionApi","limit","response","apiClient","logger","_a","errorHandler","itemId","sectionId","createProductsModule","state","posApi","companyStore","fetchCategories","fetchProducts","allSections","sectionsMap","section","categoryIds","c","params","product","sections","setDefaultSection","categoryId","itemData","STORAGE_KEY","createOrdersModule","posOperations","initializeHoldInvoices","storedInvoices","persistHoldInvoices","validateHoldInvoiceData","data","missing","field","item","index","OrderType","PaidStatus","prepareHoldInvoiceData","orderData","currentDate","dueDate","PriceUtils","holdOrder","formattedData","fetchHoldInvoices","updateHoldInvoice","description","updateHoldInvoicePaidStatus","id","paidStatus","deleteHoldInvoice","createGetters","cartStore","hasActiveOrder","computed","canPlaceOrder","categoriesForDisplay","category","systemReady","setupMessage","createActions","type","table","reference","info","value","usePosStore","defineStore","useCartStore","useCompanyStore","usePosApi","productsModule","ordersModule","getters","actions"],"mappings":"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"}