{"version":3,"file":"cart-store-98b500d5.js","sources":["../../src/utils/price.js","../../src/types/order.ts","../../src/stores/cart/state.js","../../src/stores/cart/getters.js","../../src/services/api/pos-api.js","../../src/stores/cart/actions.js","../../src/stores/cart/helpers.js","../../src/stores/cart/invoice.js","../../src/services/cartSync.ts","../../src/stores/cart-store.js"],"sourcesContent":["// src/utils/price.js\r\n\r\n/**\r\n * Utility class for handling price operations throughout the application\r\n * All internal calculations are done in cents (integers) to avoid floating point issues\r\n */\r\nexport class PriceUtils {\r\n  /**\r\n   * Converts a decimal dollar amount to cents\r\n   * Ensures consistent integer output for price calculations\r\n   * @param {number|string} amount - Amount in decimal dollars or cents\r\n   * @returns {number} Amount in cents as integer\r\n   * @throws {Error} If input cannot be converted to a valid number\r\n   */\r\n  static toCents(amount) {\r\n    // Handle null, undefined, or zero values\r\n    if (!amount) return 0\r\n\r\n    console.debug('[PriceUtils.toCents] Input:', { \r\n      amount,\r\n      type: typeof amount,\r\n      isInteger: Number.isInteger(amount)\r\n    })\r\n\r\n    // If already an integer and less than a large threshold (e.g., $1M in cents), assume it's in cents\r\n    if (Number.isInteger(amount) && amount < 100000000) {\r\n      console.debug('[PriceUtils.toCents] Already in cents:', amount)\r\n      return Math.round(amount)\r\n    }\r\n\r\n    // If it's a large integer, it's likely already in dollars\r\n    if (Number.isInteger(amount) && amount >= 100000000) {\r\n      const cents = Math.round(amount * 100)\r\n      console.debug('[PriceUtils.toCents] Converting large dollar amount:', { \r\n        dollars: amount, \r\n        cents \r\n      })\r\n      return cents\r\n    }\r\n\r\n    // Handle string inputs\r\n    if (typeof amount === 'string') {\r\n      // Remove currency symbols, commas, and trim whitespace\r\n      const cleanAmount = amount.replace(/[$,\\s]/g, '')\r\n      amount = parseFloat(cleanAmount)\r\n    }\r\n\r\n    // Validate numeric conversion\r\n    if (isNaN(amount)) {\r\n      throw new Error(`Cannot convert ${amount} to cents`)\r\n    }\r\n\r\n    // Convert to cents, rounding to handle floating point imprecision\r\n    return Math.round(amount * 100)\r\n  }\r\n\r\n  /**\r\n   * Converts cents to decimal dollars\r\n   * @param {number|string} cents - Amount in cents\r\n   * @returns {number} Amount in decimal dollars\r\n   * @throws {Error} If input cannot be converted to a valid number\r\n   */\r\n  static toDollars(cents) {\r\n    // Handle null, undefined, or zero values\r\n    if (!cents) return 0\r\n\r\n    // Handle string inputs\r\n    if (typeof cents === 'string') {\r\n      cents = parseInt(cents.replace(/[^0-9.-]/g, ''), 10)\r\n    }\r\n\r\n    // Validate numeric conversion\r\n    if (isNaN(cents)) {\r\n      throw new Error(`Cannot convert ${cents} to dollars`)\r\n    }\r\n\r\n    // Convert to dollars with 2 decimal precision\r\n    return Number((cents / 100).toFixed(2))\r\n  }\r\n\r\n  /**\r\n   * Formats a price for display with currency symbol\r\n   * Handles both cent and dollar inputs\r\n   * @param {number|string} amount - Amount in cents or dollars\r\n   * @param {string} [currency='USD'] - Currency code\r\n   * @returns {string} Formatted price string\r\n   */\r\n  static format(amount, currency = 'USD') {\r\n    // Normalize input to cents\r\n    const cents = this.toCents(amount)\r\n    const dollars = this.toDollars(cents)\r\n\r\n    return new Intl.NumberFormat('en-US', {\r\n      style: 'currency',\r\n      currency: currency,\r\n      minimumFractionDigits: 2,\r\n      maximumFractionDigits: 2\r\n    }).format(dollars)\r\n  }\r\n\r\n  /**\r\n   * Formats invoice amounts specifically - handles both cent and dollar inputs\r\n   * @param {number} amount - Amount either in dollars or cents\r\n   * @returns {string} Formatted price string\r\n   */\r\n  static formatInvoiceAmount(amount) {\r\n    if (!amount) return this.format(0)\r\n    \r\n    // If amount is small (like 5.38), it's in dollars - convert to cents\r\n    return this.isInDollars(amount) \r\n      ? this.format(this.toCents(amount))\r\n      : this.format(amount)\r\n  }\r\n\r\n  /**\r\n   * Detects if a number is likely in dollars or cents\r\n   * @param {number} amount - Amount to check\r\n   * @returns {boolean} True if the amount appears to be in dollars\r\n   */\r\n  static isInDollars(amount) {\r\n    if (!amount) return false\r\n    \r\n    // If it's a string, parse it first\r\n    if (typeof amount === 'string') {\r\n      amount = parseFloat(amount)\r\n    }\r\n\r\n    // If it has decimal places, it's definitely in dollars\r\n    if (amount % 1 !== 0) return true\r\n    \r\n    // If it's a small whole number (< 100), assume it's dollars\r\n    // This handles cases like price: 15 meaning $15.00, not $0.15\r\n    if (Number.isInteger(amount) && amount > 0 && amount < 100) {\r\n      return true\r\n    }\r\n    \r\n    // For larger numbers, assume cents\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Ensures a number is in cents regardless of input format\r\n   * @param {number} amount - Amount either in dollars or cents\r\n   * @returns {number} Amount in cents\r\n   */\r\n  static ensureCents(amount) {\r\n    if (!amount) return 0\r\n\r\n    // If it's a string, parse it first\r\n    if (typeof amount === 'string') {\r\n      amount = parseFloat(amount.replace(/[^0-9.-]/g, ''))\r\n    }\r\n\r\n    // If it has decimal places, it's in dollars - convert to cents\r\n    // Otherwise, it's already in cents\r\n    return amount % 1 !== 0 ? Math.round(amount * 100) : Math.round(amount)\r\n  }\r\n\r\n  /**\r\n   * Normalizes a price value to ensure consistent format\r\n   * Handles both dollar and cent inputs\r\n   * @param {number|string} price - Price value to normalize\r\n   * @returns {number} Normalized price in cents\r\n   */\r\n  static normalizePrice(price) {\r\n    if (!price) return 0\r\n    // If price is a string, clean it and convert to number\r\n    if (typeof price === 'string') {\r\n      price = parseFloat(price.replace(/[^0-9.-]/g, ''))\r\n    }\r\n    \r\n    // If price has decimal places, it's in dollars - convert to cents\r\n    return price % 1 !== 0 ? Math.round(price * 100) : Math.round(price)\r\n  }\r\n\r\n  /**\r\n   * Safely parses a price value from any input\r\n   * @param {number|string} value - Price value to parse\r\n   * @returns {number} Price in cents\r\n   */\r\n  static parse(value) {\r\n    if (!value) return 0\r\n    if (typeof value === 'string') {\r\n      // Remove currency symbols and whitespace\r\n      value = value.replace(/[$,\\s]/g, '')\r\n    }\r\n    const floatValue = parseFloat(value)\r\n    return this.normalizePrice(floatValue)\r\n  }\r\n\r\n  /**\r\n   * Validates if a price value is valid\r\n   * @param {number|string} value - Price value to validate\r\n   * @returns {boolean} True if valid price\r\n   */\r\n  static isValid(value) {\r\n    if (typeof value === 'string') {\r\n      value = this.parse(value)\r\n    }\r\n    return Number.isFinite(value) && value >= 0\r\n  }\r\n\r\n  /**\r\n   * Calculates total from an array of items with price and quantity\r\n   * @param {Array<{price: number, quantity: number}>} items - Array of items\r\n   * @returns {number} Total in cents\r\n   */\r\n  static calculateTotal(items) {\r\n    if (!Array.isArray(items)) return 0\r\n    return items.reduce((sum, item) => {\r\n      const price = this.normalizePrice(item.price)\r\n      const quantity = Number(item.quantity) || 1\r\n      return sum + (price * quantity)\r\n    }, 0)\r\n  }\r\n}\r\n\r\n// Development environment test cases\r\nif (process.env.NODE_ENV === 'development') {\r\n  const runTests = () => {\r\n    const testCases = [\r\n      { input: 1.49, expected: 149 },     // Regular price\r\n      { input: 50.00, expected: 5000 },   // Even dollars\r\n      { input: 100.00, expected: 10000 }, // Boundary case\r\n      { input: 999.99, expected: 99999 }, // Large amount\r\n      { input: 0.99, expected: 99 },      // Sub-dollar\r\n      { input: '1.49', expected: 149 },   // String input\r\n      { input: '$1.49', expected: 149 },  // Currency symbol\r\n      { input: 149, expected: 149 },      // Already in cents\r\n      { input: '149', expected: 149 },    // String cents\r\n    ]\r\n\r\n    testCases.forEach(({ input, expected }) => {\r\n      const result = PriceUtils.normalizePrice(input)\r\n      console.assert(\r\n        result === expected,\r\n        `Price normalization failed for ${input}. Expected ${expected}, got ${result}`\r\n      )\r\n    })\r\n\r\n    // Test formatInvoiceAmount\r\n    console.assert(PriceUtils.formatInvoiceAmount(5.38) === '$5.38', 'Handle dollar amount')\r\n    console.assert(PriceUtils.formatInvoiceAmount(538) === '$5.38', 'Handle cent amount')\r\n    \r\n    // Test isInDollars\r\n    console.assert(PriceUtils.isInDollars(5.38) === true, 'Detect dollar amount')\r\n    console.assert(PriceUtils.isInDollars(538) === false, 'Detect cent amount')\r\n    \r\n    // Test ensureCents\r\n    console.assert(PriceUtils.ensureCents(5.38) === 538, 'Convert dollars to cents')\r\n    console.assert(PriceUtils.ensureCents(538) === 538, 'Keep cents as cents')\r\n    \r\n    // Test edge cases\r\n    console.assert(PriceUtils.formatInvoiceAmount(0) === '$0.00', 'Handle zero')\r\n    console.assert(PriceUtils.formatInvoiceAmount(null) === '$0.00', 'Handle null')\r\n    console.assert(PriceUtils.formatInvoiceAmount(undefined) === '$0.00', 'Handle undefined')\r\n  }\r\n\r\n  try {\r\n    runTests()\r\n  } catch (error) {\r\n    console.error('Price utils test failed:', error)\r\n  }\r\n}\r\n","import { Product } from './product'\r\nimport { User } from './user'\r\n\r\nexport enum InvoiceStatus {\r\n  PENDING = 'PENDING',\r\n  GENERATED = 'GENERATED',\r\n  FAILED = 'FAILED',\r\n  CANCELLED = 'CANCELLED'\r\n}\r\n\r\nexport enum PaidStatus {\r\n  PAID = 'PAID',\r\n  UNPAID = 'UNPAID'\r\n}\r\n\r\nexport enum OrderType {\r\n  DINE_IN = 'DINE IN',\r\n  TO_GO = 'TO-GO',\r\n  DELIVERY = 'DELIVERY',\r\n  PICKUP = 'PICKUP'\r\n}\r\n\r\nexport enum OrderStatus {\r\n  PENDING = 'pending',\r\n  IN_PROGRESS = 'in_progress',\r\n  COMPLETED = 'completed',\r\n  CANCELLED = 'cancelled'\r\n}\r\n\r\nexport interface OrderItem {\r\n  id: number\r\n  name: string\r\n  price: number\r\n  quantity: number\r\n  section_id?: number\r\n  section_type?: 'kitchen' | 'bar'\r\n  section_name?: string\r\n}\r\n\r\nexport interface Order {\r\n  id?: number\r\n  user_id?: number\r\n  total: number\r\n  subtotal: number\r\n  tax: number\r\n  discount?: number\r\n  products: Product[]\r\n  status: OrderStatus | string\r\n  type: OrderType\r\n  paid_status: PaidStatus\r\n  notes?: string\r\n  created_at?: Date | string\r\n  updated_at?: Date | string\r\n  items: OrderItem[]\r\n  \r\n  // New invoice-related fields\r\n  invoice_number?: string\r\n  invoice_status?: InvoiceStatus\r\n  invoice_generated_at?: Date\r\n  send_sms?: number // 0 or 1 for SMS sending flag\r\n}\r\n\r\nexport interface InvoiceGenerationRequest {\r\n  orderId: number\r\n  userId: number\r\n}\r\n\r\nexport interface InvoiceResponse {\r\n  order: Order\r\n  invoice_number: string\r\n  status: InvoiceStatus\r\n}\r\n","import { OrderType } from '../../types/order'\r\n\r\nexport const state = () => ({\r\n  items: [],\r\n  discountType: 'fixed',\r\n  discountValue: 0,\r\n  taxRate: 0.08, // 8% tax rate\r\n  loading: false,\r\n  error: null,\r\n  notes: '',\r\n  selectedTables: [],\r\n  holdInvoiceId: null,\r\n  holdOrderDescription: null,\r\n  type: null, // Add type to state\r\n  editingInvoiceId: null, // Track which invoice is being edited\r\n  editingInvoiceNumber: null, // Track invoice number being edited\r\n  editingInvoiceStatus: null // Track invoice status being edited\r\n})\r\n\r\nexport const mutations = {\r\n  setNotes(state, notes) {\r\n    state.notes = notes\r\n  },\r\n\r\n  setSelectedTables(state, tables) {\r\n    state.selectedTables = tables\r\n  },\r\n\r\n  setHoldInvoiceId(state, id) {\r\n    state.holdInvoiceId = id\r\n    if (!id) {\r\n      state.holdOrderDescription = null\r\n    }\r\n  },\r\n\r\n  setHoldOrderDescription(state, description) {\r\n    state.holdOrderDescription = description\r\n  },\r\n\r\n  setDiscount(state, { type, value }) {\r\n    state.discountType = type\r\n    state.discountValue = value\r\n  },\r\n\r\n  setType(state, type) {\r\n    if (type && !Object.values(OrderType).includes(type)) {\r\n      throw new Error(`Invalid order type: ${type}`)\r\n    }\r\n    state.type = type\r\n  },\r\n\r\n  clearCart(state) {\r\n    state.items = []\r\n    state.discountType = 'fixed'\r\n    state.discountValue = 0\r\n    state.notes = ''\r\n    state.selectedTables = []\r\n    state.holdInvoiceId = null\r\n    state.holdOrderDescription = null\r\n    state.type = null // Reset type when clearing cart\r\n    state.editingInvoiceId = null // Reset editing invoice ID\r\n  }\r\n}\r\n","// src/stores/cart/getters.js\r\nimport { OrderType } from '../../types/order'\r\nimport { PriceUtils } from '@/utils/price'\r\n\r\nexport const getters = {\r\n  subtotal: (state) => {\r\n    return state.items.reduce((sum, item) => {\r\n      const itemPrice = PriceUtils.normalizePrice(item.price)\r\n      const itemTotal = itemPrice * item.quantity\r\n      return sum + itemTotal\r\n    }, 0)\r\n  },\r\n\r\n  discountAmount: (state) => {\r\n    if (state.discountType === '%') {\r\n      return Math.round(state.items.reduce((sum, item) => {\r\n        const itemPrice = PriceUtils.normalizePrice(item.price)\r\n        return sum + (itemPrice * item.quantity)\r\n      }, 0) * (state.discountValue / 100))\r\n    }\r\n    return PriceUtils.toCents(state.discountValue)\r\n  },\r\n\r\n  taxableAmount: (state) => {\r\n    const subtotal = state.items.reduce((sum, item) => {\r\n      const itemPrice = PriceUtils.normalizePrice(item.price)\r\n      return sum + (itemPrice * item.quantity)\r\n    }, 0)\r\n    \r\n    const discount = state.discountType === '%' \r\n      ? Math.round(subtotal * (state.discountValue / 100))\r\n      : PriceUtils.toCents(state.discountValue)\r\n    \r\n    return subtotal - discount\r\n  },\r\n\r\n  taxAmount: (state) => {\r\n    // Use the taxableAmount getter to get the amount after discount\r\n    const taxableAmount = getters.taxableAmount(state)\r\n    \r\n    // Use tax rate directly since it's already in decimal form (0.08 = 8%)\r\n    return Math.round(taxableAmount * state.taxRate)\r\n  },\r\n\r\n  total: (state) => {\r\n    const subtotal = state.items.reduce((sum, item) => {\r\n      const itemPrice = PriceUtils.normalizePrice(item.price)\r\n      return sum + (itemPrice * item.quantity)\r\n    }, 0)\r\n    \r\n    const discount = state.discountType === '%' \r\n      ? Math.round(subtotal * (state.discountValue / 100))\r\n      : PriceUtils.toCents(state.discountValue)\r\n    \r\n    const taxableAmount = subtotal - discount\r\n    // Use tax rate directly since it's already in decimal form\r\n    const taxAmount = Math.round(taxableAmount * state.taxRate)\r\n    \r\n    return Math.round(taxableAmount + taxAmount)\r\n  },\r\n\r\n  itemCount: (state) => {\r\n    return state.items.reduce((sum, item) => sum + item.quantity, 0)\r\n  },\r\n\r\n  isEmpty: (state) => {\r\n    return state.items.length === 0\r\n  },\r\n\r\n  isHoldOrder: (state) => {\r\n    return state.holdInvoiceId !== null\r\n  },\r\n\r\n  orderType: (state) => {\r\n    return state.type || null\r\n  },\r\n\r\n  isValidOrderType: (state) => {\r\n    return state.type && Object.values(OrderType).includes(state.type)\r\n  },\r\n\r\n  isEditingInvoice: (state) => {\r\n    return state.editingInvoiceId !== null\r\n  },\r\n\r\n  canUpdateInvoice: (state) => {\r\n    return state.editingInvoiceId !== null && \r\n           ['DRAFT', 'SENT'].includes(state.editingInvoiceStatus)\r\n  }\r\n}","import apiClient from './client'\r\nimport { logger } from '../../utils/logger'\r\nimport { getApiEndpoint } from './config'\r\n\r\n/**\r\n * Required settings for POS operations\r\n */\r\nconst REQUIRED_SETTINGS = [\r\n  'allow_invoice_form_pos',\r\n  'pdf_format_pos',\r\n  'default_email',\r\n  'tax_per_item',\r\n  'discount_per_item',\r\n  'retention_active',\r\n  'invoice_auto_generate',\r\n  'invoice_issuance_period',\r\n  'payment_auto_generate',\r\n  'allow_partial_pay',\r\n  'footer_text_value',\r\n  'footer_url_value',\r\n  'footer_url_name',\r\n  'autoprint_pdf_pos',\r\n  'current_year',\r\n  'activate_pay_button'\r\n]\r\n\r\n/**\r\n * Get next number from API\r\n * @param {string} key - Type of number to generate (invoice, payment, etc.)\r\n * @returns {Promise<Object>} Next number response\r\n */\r\nasync function getNextNumber(key) {\r\n  logger.startGroup(`POS API: Get Next ${key} Number`)\r\n  try {\r\n    const endpoint = getApiEndpoint('nextNumber')\r\n    logger.info(`Fetching next ${key} number from endpoint:`, endpoint)\r\n    \r\n    const response = await apiClient.get(endpoint, { params: { key } })\r\n    logger.debug(`Next ${key} number response:`, response.data)\r\n    \r\n    // Validate response format\r\n    if (!response.data?.nextNumber || !response.data?.prefix) {\r\n      throw new Error(`Invalid next ${key} number response format`)\r\n    }\r\n    \r\n    return {\r\n      number: `${response.data.prefix}${response.data.nextNumber}`,\r\n      nextNumber: response.data.nextNumber,\r\n      prefix: response.data.prefix\r\n    }\r\n  } catch (error) {\r\n    logger.error(`Failed to get next ${key} number`, error)\r\n    throw new Error(`Failed to get next ${key} number: ${error.message}`)\r\n  } finally {\r\n    logger.endGroup()\r\n  }\r\n}\r\n\r\n/**\r\n * POS API Service\r\n * Implements endpoints from CorePOS API Implementation Guide\r\n */\r\nconst operations = {\r\n  // Settings Management\r\n  async getCompanySettings() {\r\n    logger.startGroup('POS API: Get Company Settings')\r\n    try {\r\n      const endpoint = getApiEndpoint('pos.settings')\r\n      logger.info('Fetching company settings from endpoint:', endpoint)\r\n      \r\n      // Prepare settings parameter\r\n      const params = {\r\n        settings: REQUIRED_SETTINGS\r\n      }\r\n      \r\n      const response = await apiClient.get(endpoint, { params })\r\n      logger.debug('Company settings response:', response.data)\r\n      \r\n      return response.data\r\n    } catch (error) {\r\n      logger.error('Failed to fetch company settings', error)\r\n      throw error\r\n    } finally {\r\n      logger.endGroup()\r\n    }\r\n  },\r\n\r\n  // User Management\r\n  async getEmployees() {\r\n    logger.startGroup('POS API: Get Employees')\r\n    try {\r\n      const endpoint = getApiEndpoint('pos.employees')\r\n      logger.info('Fetching employees from endpoint:', endpoint)\r\n      \r\n      const response = await apiClient.get(endpoint)\r\n      logger.http('GET', endpoint, {}, response)\r\n\r\n      if (!response.data) {\r\n        throw new Error('Invalid response format: missing data')\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        employees: response.data\r\n      }\r\n    } catch (error) {\r\n      logger.error('Failed to fetch employees', error)\r\n      throw error\r\n    } finally {\r\n      logger.endGroup()\r\n    }\r\n  },\r\n\r\n  // Cash Register Management\r\n  async getCashiers() {\r\n    logger.startGroup('POS API: Get Cashiers')\r\n    try {\r\n      const endpoint = getApiEndpoint('pos.cashiers')\r\n      logger.info('Fetching cashiers from endpoint:', endpoint)\r\n      \r\n      const response = await apiClient.get(endpoint)\r\n      logger.http('GET', endpoint, {}, response)\r\n      \r\n      if (!response.data) {\r\n        throw new Error('Invalid response format: missing data')\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        cashiers: response.data\r\n      }\r\n    } catch (error) {\r\n      logger.error('Failed to fetch cashiers', error)\r\n      throw error\r\n    } finally {\r\n      logger.endGroup()\r\n    }\r\n  },\r\n\r\n  // Product Management\r\n  async getItems(params = {}) {\r\n    logger.startGroup('POS API: Get Items')\r\n    try {\r\n      const endpoint = getApiEndpoint('pos.items')\r\n      logger.info('Fetching items from endpoint:', endpoint)\r\n      logger.debug('Request parameters', params)\r\n\r\n      const response = await apiClient.get(endpoint, { params })\r\n      logger.http('GET', endpoint, { params }, response)\r\n\r\n      if (!response.data) {\r\n        throw new Error('Invalid response format: missing data')\r\n      }\r\n\r\n      return response.data\r\n    } catch (error) {\r\n      logger.error('Failed to fetch items', {\r\n        error,\r\n        endpoint: getApiEndpoint('pos.items'),\r\n        params\r\n      })\r\n      throw error\r\n    } finally {\r\n      logger.endGroup()\r\n    }\r\n  },\r\n\r\n  async createItem(itemData) {\r\n    logger.startGroup('POS API: Create Item')\r\n    try {\r\n      const endpoint = getApiEndpoint('pos.items')\r\n      logger.info('Creating item at endpoint:', endpoint)\r\n      logger.debug('Item data:', itemData)\r\n\r\n      const response = await apiClient.post(endpoint, itemData)\r\n      logger.http('POST', endpoint, { data: itemData }, response)\r\n\r\n      if (!response.data) {\r\n        throw new Error('Invalid response format: missing data')\r\n      }\r\n\r\n      return response.data\r\n    } catch (error) {\r\n      logger.error('Failed to create item', {\r\n        error,\r\n        endpoint: getApiEndpoint('pos.items'),\r\n        itemData\r\n      })\r\n      throw error\r\n    } finally {\r\n      logger.endGroup()\r\n    }\r\n  },\r\n\r\n  async updateItem(itemId, itemData) {\r\n    logger.startGroup('POS API: Update Item')\r\n    try {\r\n      const endpoint = `${getApiEndpoint('pos.items')}/${itemId}`\r\n      logger.info('Updating item at endpoint:', endpoint)\r\n      logger.debug('Item data:', itemData)\r\n\r\n      const response = await apiClient.put(endpoint, itemData)\r\n      logger.http('PUT', endpoint, { data: itemData }, response)\r\n\r\n      if (!response.data) {\r\n        throw new Error('Invalid response format: missing data')\r\n      }\r\n\r\n      return response.data\r\n    } catch (error) {\r\n      logger.error('Failed to update item', {\r\n        error,\r\n        endpoint: getApiEndpoint('pos.items'),\r\n        itemId,\r\n        itemData\r\n      })\r\n      throw error\r\n    } finally {\r\n      logger.endGroup()\r\n    }\r\n  },\r\n\r\n  async getItemCategories() {\r\n    logger.startGroup('POS API: Get Item Categories')\r\n    try {\r\n      const endpoint = getApiEndpoint('pos.categories')\r\n      logger.info('Fetching item categories from endpoint:', endpoint)\r\n      \r\n      const response = await apiClient.get(endpoint)\r\n      logger.http('GET', endpoint, {}, response)\r\n\r\n      if (!response.data) {\r\n        throw new Error('Invalid response format: missing data')\r\n      }\r\n\r\n      if (response.data.success === true) {\r\n        const categories = response.data.data || []\r\n        logger.info(`Categories fetched successfully. Count: ${categories.length}`)\r\n        logger.debug('Categories:', categories)\r\n        return {\r\n          success: true,\r\n          data: categories\r\n        }\r\n      } else {\r\n        logger.warn('Unexpected API response structure', response.data)\r\n        return {\r\n          success: false,\r\n          data: [],\r\n          error: 'Invalid API response format'\r\n        }\r\n      }\r\n    } catch (error) {\r\n      logger.error('Failed to fetch categories', {\r\n        error,\r\n        endpoint: getApiEndpoint('pos.categories')\r\n      })\r\n      throw error\r\n    } finally {\r\n      logger.endGroup()\r\n    }\r\n  },\r\n\r\n  // Store Management\r\n  async getStores() {\r\n    logger.startGroup('POS API: Get Stores')\r\n    try {\r\n      const endpoint = getApiEndpoint('pos.store')\r\n      logger.info('Fetching stores from endpoint:', endpoint)\r\n\r\n      const params = {\r\n        limit: 10000,\r\n        orderByField: 'name',\r\n        orderBy: 'asc'\r\n      }\r\n\r\n      const response = await apiClient.get(endpoint, { params })\r\n      logger.http('GET', endpoint, { params }, response)\r\n\r\n      if (!response.data) {\r\n        throw new Error('Invalid response format: missing data')\r\n      }\r\n\r\n      return {\r\n        success: true,\r\n        stores: response.data\r\n      }\r\n    } catch (error) {\r\n      logger.error('Failed to fetch stores', {\r\n        error,\r\n        endpoint: getApiEndpoint('pos.store')\r\n      })\r\n      throw error\r\n    } finally {\r\n      logger.endGroup()\r\n    }\r\n  },\r\n\r\n  // Invoice Operations\r\n  invoice: {\r\n    async getNextNumber() {\r\n      const response = await getNextNumber('invoice')\r\n      return {\r\n        invoice_number: response.number,\r\n        nextNumber: response.nextNumber,\r\n        prefix: response.prefix\r\n      }\r\n    },\r\n\r\n    async create(invoiceData) {\r\n      logger.startGroup('POS API: Create Invoice')\r\n      try {\r\n        const endpoint = getApiEndpoint('pos.invoice.create')\r\n        logger.info('Creating invoice at endpoint:', endpoint)\r\n        logger.debug('Invoice data:', invoiceData)\r\n\r\n        const response = await apiClient.post(endpoint, invoiceData)\r\n        logger.debug('Invoice creation response:', response.data)\r\n\r\n        return response.data\r\n      } catch (error) {\r\n        logger.error('Failed to create invoice', error)\r\n        throw error\r\n      } finally {\r\n        logger.endGroup()\r\n      }\r\n    },\r\n\r\n    async getById(id) {\r\n      logger.startGroup('POS API: Get Invoice')\r\n      try {\r\n        const endpoint = `${getApiEndpoint('pos.invoice.get')}/${id}`\r\n        logger.info('Fetching invoice from endpoint:', endpoint)\r\n        \r\n        const response = await apiClient.get(endpoint)\r\n        logger.debug('Invoice response:', response.data)\r\n        \r\n        return response.data\r\n      } catch (error) {\r\n        logger.error('Failed to get invoice', error)\r\n        throw error\r\n      } finally {\r\n        logger.endGroup()\r\n      }\r\n    },\r\n\r\n    async getAll(params = {}) {\r\n      logger.startGroup('POS API: Get All Invoices')\r\n      try {\r\n        const endpoint = getApiEndpoint('pos.invoice.getAll')\r\n        logger.info('Fetching invoices from endpoint:', endpoint)\r\n        \r\n        const response = await apiClient.get(endpoint, { params })\r\n        logger.debug('Invoices response:', response.data)\r\n        \r\n        return {\r\n          success: true,\r\n          data: response.data.invoices || []\r\n        }\r\n      } catch (error) {\r\n        logger.error('Failed to fetch invoices', error)\r\n        throw error\r\n      } finally {\r\n        logger.endGroup()\r\n      }\r\n    },\r\n\r\n    async update(id, invoiceData) {\r\n      logger.startGroup('POS API: Update Invoice')\r\n      try {\r\n        const endpoint = `invoices/${id}`\r\n        logger.info('Updating invoice at endpoint:', endpoint)\r\n        \r\n        // Format the data according to API requirements\r\n        const formattedData = {\r\n          ...invoiceData,\r\n          id: Number(id),\r\n          is_edited: 1,\r\n          status: 'DRAFT',\r\n          is_invoice_pos: 1,\r\n          is_pdf_pos: true,\r\n          banType: true,\r\n          avalara_bool: false,\r\n          package_bool: 0,\r\n          save_as_draft: 0,\r\n          not_charge_automatically: 0\r\n        }\r\n\r\n        logger.debug('Formatted invoice update data:', formattedData)\r\n        \r\n        // Format the data according to API requirements\r\n        const updateData = {\r\n          ...formattedData,\r\n          id: Number(id),\r\n          is_edited: 1,\r\n          status: 'DRAFT',\r\n          is_invoice_pos: 1,\r\n          is_pdf_pos: true,\r\n          banType: true,\r\n          avalara_bool: false,\r\n          package_bool: 0,\r\n          save_as_draft: 0,\r\n          not_charge_automatically: 0,\r\n          items: formattedData.items.map(item => ({\r\n            ...item,\r\n            price: Math.round(Number(item.price * 100)),\r\n            sub_total: Math.round(Number(item.sub_total * 100)),\r\n            total: Math.round(Number(item.total * 100)),\r\n            tax: Math.round(Number(item.tax * 100))\r\n          }))\r\n        }\r\n\r\n        const response = await apiClient.put(endpoint, updateData)\r\n        logger.debug('Invoice update response:', response.data)\r\n        \r\n        return response.data\r\n      } catch (error) {\r\n        logger.error('Failed to update invoice', error)\r\n        throw error\r\n      } finally {\r\n        logger.endGroup()\r\n      }\r\n    }\r\n  },\r\n\r\n  // Payment Operations\r\n  payment: {\r\n    async getMethods() {\r\n      logger.startGroup('POS API: Get Payment Methods')\r\n      try {\r\n        const endpoint = getApiEndpoint('pos.payment.methods')\r\n        logger.info('Fetching payment methods from endpoint:', endpoint)\r\n        \r\n        const response = await apiClient.get(endpoint)\r\n        logger.debug('Payment methods response:', response.data)\r\n        \r\n        return response.data\r\n      } catch (error) {\r\n        logger.error('Failed to get payment methods', error)\r\n        throw error\r\n      } finally {\r\n        logger.endGroup()\r\n      }\r\n    },\r\n\r\n    async getNextNumber() {\r\n      const response = await getNextNumber('payment')\r\n      return {\r\n        payment_number: response.number,\r\n        nextNumber: response.nextNumber,\r\n        prefix: response.prefix\r\n      }\r\n    },\r\n\r\n    async create(paymentData) {\r\n      logger.startGroup('POS API: Create Payment')\r\n      try {\r\n        const endpoint = getApiEndpoint('pos.payment.create')\r\n        logger.info('Creating payment at endpoint:', endpoint)\r\n        logger.debug('Payment data:', paymentData)\r\n\r\n        const response = await apiClient.post(endpoint, paymentData)\r\n        logger.debug('Payment creation response:', response.data)\r\n\r\n        return response.data\r\n      } catch (error) {\r\n        logger.error('Failed to create payment', error)\r\n        throw error\r\n      } finally {\r\n        logger.endGroup()\r\n      }\r\n    },\r\n\r\n    async getById(id) {\r\n      logger.startGroup('POS API: Get Payment')\r\n      try {\r\n        const endpoint = `${getApiEndpoint('pos.payment.get')}/${id}`\r\n        logger.info('Fetching payment from endpoint:', endpoint)\r\n        \r\n        const response = await apiClient.get(endpoint)\r\n        logger.debug('Payment response:', response.data)\r\n        \r\n        return response.data\r\n      } catch (error) {\r\n        logger.error('Failed to get payment', error)\r\n        throw error\r\n      } finally {\r\n        logger.endGroup()\r\n      }\r\n    }\r\n  },\r\n\r\n  // Hold Invoice Operations\r\n  holdInvoice: {\r\n    async create(invoiceData) {\r\n      logger.startGroup('POS API: Create Hold Invoice')\r\n      try {\r\n        const endpoint = getApiEndpoint('pos.holdInvoices')\r\n        logger.info('Creating hold invoice at endpoint:', endpoint)\r\n        logger.debug('Hold invoice data:', invoiceData)\r\n\r\n        const response = await apiClient.post(endpoint, invoiceData)\r\n        logger.debug('Hold invoice response:', response.data)\r\n\r\n        return response.data\r\n      } catch (error) {\r\n        logger.error('Failed to create hold invoice', error)\r\n        throw error\r\n      } finally {\r\n        logger.endGroup()\r\n      }\r\n    },\r\n\r\n    async update(description, invoiceData) {\r\n      logger.startGroup('POS API: Update Hold Invoice')\r\n      try {\r\n        const endpoint = getApiEndpoint('pos.holdInvoices')\r\n        logger.info(`Updating hold invoice with description: ${description}`)\r\n        logger.debug('Hold invoice update data:', invoiceData)\r\n\r\n        const response = await apiClient.post(endpoint, {\r\n          ...invoiceData,\r\n          description,\r\n          is_hold_invoice: true\r\n        })\r\n        logger.debug('Hold invoice update response:', response.data)\r\n\r\n        return {\r\n          success: true,\r\n          data: response.data\r\n        }\r\n      } catch (error) {\r\n        logger.error('Failed to update hold invoice', error)\r\n        return {\r\n          success: false,\r\n          error: error.message,\r\n          message: 'Failed to update hold invoice'\r\n        }\r\n      } finally {\r\n        logger.endGroup()\r\n      }\r\n    },\r\n\r\n    async getAll() {\r\n      logger.startGroup('POS API: Get All Hold Invoices')\r\n      try {\r\n        const endpoint = getApiEndpoint('pos.holdInvoices')\r\n        const response = await apiClient.get(endpoint)\r\n        logger.debug('Hold invoices response:', response.data)\r\n        \r\n        return {\r\n          success: true,\r\n          data: {\r\n            hold_invoices: response.data.hold_invoices\r\n          }\r\n        }\r\n      } catch (error) {\r\n        logger.error('Failed to fetch hold invoices', error)\r\n        throw error\r\n      } finally {\r\n        logger.endGroup()\r\n      }\r\n    },\r\n\r\n    async getById(id) {\r\n      logger.startGroup('POS API: Get Hold Invoice')\r\n      try {\r\n        const endpoint = `${getApiEndpoint('pos.holdInvoices')}/${id}`\r\n        const response = await apiClient.get(endpoint)\r\n        logger.debug('Hold invoice response:', response.data)\r\n        return response.data\r\n      } catch (error) {\r\n        logger.error('Failed to fetch hold invoice', error)\r\n        throw error\r\n      } finally {\r\n        logger.endGroup()\r\n      }\r\n    },\r\n\r\n    async delete(id) {\r\n      logger.startGroup('POS API: Delete Hold Invoice')\r\n      try {\r\n        if (!id) {\r\n          throw new Error('Hold invoice ID is required')\r\n        }\r\n\r\n        const endpoint = getApiEndpoint('pos.holdInvoiceDelete')\r\n        logger.info('Deleting hold invoice at endpoint:', endpoint)\r\n        logger.debug('Delete hold invoice ID:', id)\r\n        \r\n        const response = await apiClient.post(endpoint, { id })\r\n        logger.debug('Delete response:', response.data)\r\n\r\n        if (!response.data?.success) {\r\n          throw new Error(response.data?.message || 'Failed to delete hold invoice')\r\n        }\r\n\r\n        return {\r\n          success: true,\r\n          data: response.data\r\n        }\r\n      } catch (error) {\r\n        logger.error('Failed to delete hold invoice', error)\r\n        return {\r\n          success: false,\r\n          error: error.message,\r\n          message: 'Failed to delete hold invoice'\r\n        }\r\n      } finally {\r\n        logger.endGroup()\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Export both the composable-style function and the direct operations object\r\nexport const usePosApi = () => operations\r\nexport const posApi = operations\r\nexport default operations\r\n","import { logger } from '../../utils/logger'\nimport { PriceUtils } from '../../utils/price'\nimport { posApi } from '../../services/api/pos-api'\nimport { useCompanyStore } from '../company'\n\nexport const actions = {\n  addItem(state, product, quantity = 1) {\n    logger.startGroup('Cart Store: Adding Item')\n    try {\n      logger.info('Adding item to cart:', { \n        product: {\n          id: product.id,\n          name: product.name,\n          price: product.price,\n          fromHeldOrder: product.fromHeldOrder,\n          formatted_price: PriceUtils.format(product.price),\n          section_id: product.section_id,\n          section_type: product.section_type,\n          section_name: product.section_name\n        }, \n        quantity \n      })\n      \n      // Price from held order is already in cents, otherwise normalize it\n      const price = product.fromHeldOrder ? product.price : PriceUtils.ensureCents(product.price)\n      logger.info('Price validation:', { \n        originalPrice: product.price,\n        fromHeldOrder: product.fromHeldOrder,\n        isInDollars: PriceUtils.isInDollars(product.price),\n        normalizedPrice: price,\n        formatted: PriceUtils.format(price)\n      })\n      \n      const existingItem = state.items.find(item => item.id === product.id)\n      \n      if (existingItem) {\n        const oldQuantity = existingItem.quantity\n        existingItem.quantity += quantity\n        existingItem.total = existingItem.price * existingItem.quantity\n        existingItem.sub_total = existingItem.total\n        logger.info('Updated existing item:', {\n          id: existingItem.id,\n          name: existingItem.name,\n          oldQuantity,\n          newQuantity: existingItem.quantity,\n          price: existingItem.price,\n          total: existingItem.total,\n          formatted_total: PriceUtils.format(existingItem.total)\n        })\n      } else {\n        const newItem = {\n          ...product,\n          price,\n          quantity,\n          total: price * quantity,\n          sub_total: price * quantity,\n          discount_type: 'fixed',\n          discount: 0,\n          discount_val: 0,\n          item_id: product.id,\n          section_id: product.section_id,\n          section_type: product.section_type,\n          section_name: product.section_name\n        }\n        state.items.push(newItem)\n        logger.info('Added new item:', {\n          id: newItem.id,\n          name: newItem.name,\n          price: newItem.price,\n          formatted_price: PriceUtils.format(newItem.price),\n          quantity: newItem.quantity,\n          total: newItem.total,\n          formatted_total: PriceUtils.format(newItem.total),\n          section_id: newItem.section_id,\n          section_type: newItem.section_type,\n          section_name: newItem.section_name\n        })\n      }\n    } catch (error) {\n      logger.error('Failed to add item to cart:', error)\n      throw error\n    } finally {\n      logger.endGroup()\n    }\n  },\n\n  updateItemQuantity(state, { itemId, quantity, index = null }) {\n    logger.startGroup('Cart Store: Updating Item Quantity')\n    try {\n      logger.info('Updating item quantity:', { itemId, quantity, index })\n      \n      let item\n      if (index !== null) {\n        item = state.items[index]\n      } else {\n        item = state.items.find(item => item.id === itemId)\n      }\n\n      if (item) {\n        const oldQuantity = item.quantity\n        const oldTotal = item.total\n        \n        if (quantity > 0) {\n          item.quantity = quantity\n          item.total = item.price * quantity\n          item.sub_total = item.total\n          \n          logger.info('Item quantity updated:', {\n            id: item.id,\n            name: item.name,\n            oldQuantity,\n            newQuantity: quantity,\n            oldTotal,\n            newTotal: item.total,\n            formatted_total: PriceUtils.format(item.total)\n          })\n        } else {\n          logger.info('Removing item due to zero quantity:', {\n            id: item.id,\n            name: item.name\n          })\n          this.removeItem(state, { itemId, index })\n        }\n      } else {\n        logger.warn('Item not found for quantity update:', { itemId, index })\n      }\n    } catch (error) {\n      logger.error('Failed to update item quantity:', error)\n      throw error\n    } finally {\n      logger.endGroup()\n    }\n  },\n\n  splitItem(state, index, splitQuantity) {\n    logger.startGroup('Cart Store: Splitting Item')\n    try {\n      logger.info('Splitting item:', { index, splitQuantity })\n      \n      const originalItem = state.items[index]\n      if (!originalItem || splitQuantity >= originalItem.quantity) {\n        logger.error('Invalid split operation:', { \n          originalItem: originalItem ? {\n            id: originalItem.id,\n            name: originalItem.name,\n            quantity: originalItem.quantity\n          } : null, \n          splitQuantity \n        })\n        return\n      }\n\n      const originalQuantity = originalItem.quantity\n      const remainingQuantity = originalQuantity - splitQuantity\n\n      // Update original item quantity\n      originalItem.quantity = remainingQuantity\n      originalItem.total = originalItem.price * remainingQuantity\n      originalItem.sub_total = originalItem.total\n\n      // Create new item with split quantity\n      const newItem = {\n        ...originalItem,\n        quantity: splitQuantity,\n        total: originalItem.price * splitQuantity,\n        sub_total: originalItem.price * splitQuantity\n      }\n\n      // Insert new item after the original item\n      state.items.splice(index + 1, 0, newItem)\n      \n      logger.info('Split completed:', { \n        originalItem: {\n          id: originalItem.id,\n          name: originalItem.name,\n          originalQuantity,\n          remainingQuantity: originalItem.quantity,\n          total: originalItem.total,\n          formatted_total: PriceUtils.format(originalItem.total)\n        },\n        newItem: {\n          id: newItem.id,\n          name: newItem.name,\n          quantity: newItem.quantity,\n          total: newItem.total,\n          formatted_total: PriceUtils.format(newItem.total)\n        }\n      })\n    } catch (error) {\n      logger.error('Failed to split item:', error)\n      throw error\n    } finally {\n      logger.endGroup()\n    }\n  },\n\n  removeItem(state, { itemId, index = null }) {\n    logger.startGroup('Cart Store: Removing Item')\n    try {\n      logger.info('Removing item from cart:', { itemId, index })\n      \n      if (index !== null) {\n        const removedItem = state.items[index]\n        logger.info('Removing item by index:', {\n          index,\n          item: removedItem ? {\n            id: removedItem.id,\n            name: removedItem.name,\n            quantity: removedItem.quantity,\n            total: removedItem.total\n          } : null\n        })\n        state.items.splice(index, 1)\n      } else {\n        const itemToRemove = state.items.find(item => item.id === itemId)\n        logger.info('Removing item by ID:', {\n          itemId,\n          item: itemToRemove ? {\n            id: itemToRemove.id,\n            name: itemToRemove.name,\n            quantity: itemToRemove.quantity,\n            total: itemToRemove.total\n          } : null\n        })\n        state.items = state.items.filter(item => item.id !== itemId)\n      }\n    } catch (error) {\n      logger.error('Failed to remove item:', error)\n      throw error\n    } finally {\n      logger.endGroup()\n    }\n  },\n\n  setDiscount(state, { type, value }) {\n    logger.startGroup('Cart Store: Setting Discount')\n    try {\n      logger.info('Setting discount:', { type, value })\n      state.discountType = type\n      state.discountValue = value\n      \n      // Calculate and log the effective discount\n      const subtotal = state.items.reduce((sum, item) => sum + item.total, 0)\n      const discountAmount = type === '%' ? \n        Math.round(subtotal * (value / 100)) : \n        PriceUtils.normalizePrice(value)\n      \n      logger.info('Discount applied:', {\n        type,\n        value,\n        subtotal,\n        formatted_subtotal: PriceUtils.format(subtotal),\n        discountAmount,\n        formatted_discount: PriceUtils.format(discountAmount),\n        finalTotal: subtotal - discountAmount,\n        formatted_final: PriceUtils.format(subtotal - discountAmount)\n      })\n    } catch (error) {\n      logger.error('Failed to set discount:', error)\n      throw error\n    } finally {\n      logger.endGroup()\n    }\n  },\n\n  setNotes(state, notes) {\n    logger.startGroup('Cart Store: Setting Notes')\n    try {\n      logger.info('Setting notes:', { notes })\n      state.notes = notes\n    } catch (error) {\n      logger.error('Failed to set notes:', error)\n      throw error\n    } finally {\n      logger.endGroup()\n    }\n  },\n\n  setType(state, type) {\n    logger.startGroup('Cart Store: Setting Type')\n    try {\n      logger.info('Setting order type:', type)\n      state.type = type\n    } catch (error) {\n      logger.error('Failed to set order type:', error)\n      throw error\n    } finally {\n      logger.endGroup()\n    }\n  },\n\n  setSelectedTables(state, tables) {\n    logger.startGroup('Cart Store: Setting Selected Tables')\n    try {\n      logger.info('Setting selected tables:', { tables })\n      state.selectedTables = tables\n    } catch (error) {\n      logger.error('Failed to set selected tables:', error)\n      throw error\n    } finally {\n      logger.endGroup()\n    }\n  },\n\n  setHoldInvoiceId(state, id) {\n    logger.startGroup('Cart Store: Setting Hold Invoice ID')\n    try {\n      logger.info('Setting hold invoice ID:', id)\n      state.holdInvoiceId = id\n      if (!id) {\n        state.holdOrderDescription = null\n      }\n    } catch (error) {\n      logger.error('Failed to set hold invoice ID:', error)\n      throw error\n    } finally {\n      logger.endGroup()\n    }\n  },\n\n  setHoldOrderDescription(state, description) {\n    logger.startGroup('Cart Store: Setting Hold Order Description')\n    try {\n      logger.info('Setting hold order description:', description)\n      state.holdOrderDescription = description\n    } catch (error) {\n      logger.error('Failed to set hold order description:', error)\n      throw error\n    } finally {\n      logger.endGroup()\n    }\n  },\n\n  clearCart(state) {\n    logger.startGroup('Cart Store: Clearing Cart')\n    try {\n      logger.info('Clearing cart')\n      state.items = []\n      state.discountType = 'fixed'\n      state.discountValue = 0\n      state.notes = ''\n      state.selectedTables = []\n      state.holdInvoiceId = null\n      state.holdOrderDescription = null\n      state.type = null // Clear type when clearing cart\n    } catch (error) {\n      logger.error('Failed to clear cart:', error)\n      throw error\n    } finally {\n      logger.endGroup()\n    }\n  },\n\n  loadInvoice(state, invoice) {\n    logger.startGroup('Cart Store: Loading Invoice')\n    try {\n      // Clear existing cart first\n      this.clearCart(state)\n        \n      // Set editing invoice details\n      state.editingInvoiceId = invoice.id\n      state.editingInvoiceNumber = invoice.invoice_number\n      state.editingInvoiceStatus = invoice.status\n      \n      // Preserve customer and contact information\n      state.customer = {\n        id: invoice.customer?.id || invoice.user_id,\n        name: invoice.contact?.name || invoice.customer?.name || invoice.name,\n        email: invoice.contact?.email || invoice.customer?.email || invoice.email,\n        phone: invoice.contact?.phone || invoice.customer?.phone || invoice.phone\n      }\n      \n      state.contact = invoice.contact || null\n\n      // Log incoming invoice data\n      logger.info('Loading invoice data:', {\n        id: invoice.id,\n        invoice_number: invoice.invoice_number,\n        customer: state.customer,\n        contact: state.contact,\n        items: invoice.items.map(item => ({\n          id: item.item_id,\n          price: item.price,\n          quantity: item.quantity,\n          total: item.total\n        }))\n      })\n\n      // Load items\n      state.items = invoice.items.map(item => {\n        // Normalize prices from backend (e.g., 14900 becomes 149)\n        const itemPrice = item.price > 1000 ? item.price / 100 : item.price\n        const itemQuantity = parseInt(item.quantity)\n        const itemTotal = itemPrice * itemQuantity\n        \n        logger.info('Processing invoice item:', {\n          id: item.item_id,\n          name: item.name,\n          price: itemPrice,\n          formatted_price: PriceUtils.format(itemPrice),\n          quantity: itemQuantity,\n          total: itemTotal,\n          formatted_total: PriceUtils.format(itemTotal)\n        })\n\n        return {\n          id: item.item_id,\n          name: item.name,\n          description: item.description || '',\n          price: itemPrice,\n          quantity: itemQuantity,\n          unit_name: item.unit_name || 'units',\n          tax: item.tax || 0,\n          total: itemTotal,\n          sub_total: itemTotal,\n          discount_type: item.discount_type || 'fixed',\n          discount: item.discount || 0,\n          discount_val: item.discount_val || 0,\n          fromHeldOrder: true // Mark item as coming from held order\n        }\n      })\n\n      // Set other invoice properties\n      state.notes = invoice.notes || ''\n      state.type = invoice.type || null\n      state.discountType = invoice.discount_type || 'fixed'\n      state.discountValue = invoice.discount_val || 0\n\n      logger.info('Invoice loaded into cart:', {\n        itemCount: state.items.length,\n        type: state.type,\n        discount: { \n          type: state.discountType, \n          value: state.discountValue,\n          formatted: PriceUtils.format(state.discountValue)\n        },\n        items: state.items.map(item => ({\n          id: item.id,\n          name: item.name,\n          price: item.price,\n          formatted_price: PriceUtils.format(item.price),\n          quantity: item.quantity,\n          total: item.total,\n          formatted_total: PriceUtils.format(item.total)\n        }))\n      })\n    } catch (error) {\n      logger.error('Failed to load invoice into cart:', error)\n      throw error\n    } finally {\n      logger.endGroup()\n    }\n  },\n\n  async updateInvoice(state) {\n    logger.startGroup('Cart Store: Updating Invoice')\n    const companyStore = useCompanyStore()\n    try {\n      if (!state.editingInvoiceId) {\n        throw new Error('No invoice being edited')\n      }\n\n      if (!state.items || state.items.length === 0) {\n        throw new Error('Cannot update invoice: Cart is empty')\n      }\n\n      // Get current date and due date\n      const currentDate = new Date()\n      const dueDate = new Date(currentDate)\n      dueDate.setDate(dueDate.getDate() + 7)\n\n      // Calculate subtotal first to use in other calculations\n      const subtotal = state.items.reduce((sum, item) => {\n        // Use toCents to ensure correct conversion\n        const itemPrice = PriceUtils.toCents(item.price)\n        const itemQuantity = Math.round(Number(item.quantity))\n        return sum + (itemPrice * itemQuantity)\n      }, 0)\n\n      // Calculate discount\n      const discountAmount = state.discountType === '%'\n        ? Math.round(subtotal * (state.discountValue / 100))\n        : PriceUtils.normalizePrice(state.discountValue)\n\n      // Calculate tax\n      const taxableAmount = subtotal - discountAmount\n      const totalTax = Math.round(taxableAmount * state.taxRate)\n\n      // Calculate final total\n      const totalAmount = taxableAmount + totalTax\n\n      // Get customer and contact information from state\n      const customer = state.customer || {}\n      const contact = state.contact || {}\n\n      // Prepare invoice data with all required fields\n      const invoiceData = {\n        // Basic invoice info\n        invoice_number: state.editingInvoiceNumber,\n        invoice_date: currentDate.toISOString().split('T')[0],\n        due_date: dueDate.toISOString().split('T')[0],\n        \n        // Amounts\n        sub_total: subtotal,\n        total: totalAmount,\n        tax: totalTax,\n        due_amount: totalAmount,\n        \n        // Items with proper formatting\n        items: state.items.map(item => {\n          const itemPrice = PriceUtils.normalizePrice(item.price)\n          const itemQuantity = Math.round(Number(item.quantity))\n          const itemSubtotal = itemPrice * itemQuantity\n          const itemTax = Math.round(itemSubtotal * state.taxRate)\n          \n          return {\n            item_id: Number(item.id),\n            name: item.name,\n            description: item.description || '',\n            price: itemPrice,\n            quantity: itemQuantity,\n            unit_name: item.unit_name || 'units',\n            sub_total: itemSubtotal,\n            total: itemSubtotal + itemTax,\n            tax: itemTax,\n            discount: \"0\",\n            discount_val: 0,\n            discount_type: \"fixed\",\n            retention_amount: 0,\n            retention_concept: \"NO_RETENTION\",\n            retention_percentage: 0,\n            retentions_id: null\n          }\n        }),\n\n        // Status and type\n        status: state.editingInvoiceStatus || 'DRAFT',\n        type: state.type,\n        \n        // Discount\n        discount_type: state.discountType || 'fixed',\n        discount: state.discountValue.toString(),\n        discount_val: discountAmount,\n        discount_per_item: \"NO\",\n\n        // Additional required fields\n        notes: state.notes || '',\n        is_invoice_pos: 1,\n        is_pdf_pos: true,\n        avalara_bool: false,\n        banType: true,\n        package_bool: false,\n        print_pdf: false,\n        save_as_draft: false,\n        send_email: false,\n        not_charge_automatically: false,\n        is_edited: 1,\n        \n        // Required IDs and customer information\n        user_id: customer.id || companyStore.selectedCustomer?.id || 1,\n        customer_id: customer.id,\n        customer_name: customer.name,\n        customer_email: customer.email,\n        contact: contact, // Preserve the original contact information\n        \n        // Store and company information\n        store_id: companyStore.selectedStore?.id || 1,\n        cash_register_id: companyStore.selectedCashier?.id || 1,\n        company_id: companyStore.company?.id || 1,\n        invoice_template_id: 1,\n        invoice_pbx_modify: 0,\n        \n        // Required arrays\n        tables_selected: [],\n        packages: [],\n        taxes: [],\n\n        // Additional required fields\n        tip: \"0\",\n        tip_type: \"fixed\", \n        tip_val: 0,\n        retention: \"NO\",\n        retention_total: 0,\n        late_fee_amount: 0,\n        late_fee_taxes: 0,\n        pbx_service_price: 0,\n        sent: 0,\n        viewed: 0,\n        \n        // Additional mandatory fields\n        tax_per_item: \"NO\",\n        retention_active: \"NO\",\n        retention_percentage: 0,\n        retention_concept: null,\n        retention_amount: 0,\n        package_bool: 0,\n        save_as_draft: 0,\n        not_charge_automatically: 0\n      }\n\n      logger.debug('Updating invoice with data:', invoiceData)\n\n      try {\n        // Call API to update invoice\n        const response = await posApi.invoice.update(state.editingInvoiceId, invoiceData)\n        \n        if (!response?.success) {\n          throw new Error(response?.message || 'Failed to update invoice')\n        }\n\n        // Clear editing state after successful update\n        state.editingInvoiceId = null\n        state.editingInvoiceNumber = null\n        state.editingInvoiceStatus = null\n\n        // Show success message\n        window.toastr?.success('Invoice updated successfully')\n\n        return response\n      } catch (error) {\n        // Show error message\n        window.toastr?.error(error.message || 'Failed to update invoice')\n        throw error\n      }\n    } catch (error) {\n      logger.error('Failed to update invoice:', error)\n      throw error\n    } finally {\n      logger.endGroup()\n    }\n  }\n}\n","import { useCompanyStore } from '../company'\r\nimport { logger } from '../../utils/logger'\r\n\r\nimport { PriceUtils } from '@/utils/price'\r\n\r\nexport const priceHelpers = {\r\n  toCents: (amount) => {\r\n    logger.debug('priceHelpers.toCents input:', { \r\n      amount,\r\n      type: typeof amount,\r\n      isInteger: Number.isInteger(amount)\r\n    })\r\n    const cents = PriceUtils.toCents(amount)\r\n    logger.debug('priceHelpers.toCents output:', { amount, cents })\r\n    return cents\r\n  },\r\n  \r\n  toDollars: (amount) => {\r\n    logger.debug('priceHelpers.toDollars input:', { \r\n      amount,\r\n      type: typeof amount,\r\n      isInteger: Number.isInteger(amount)\r\n    })\r\n    const dollars = Number(PriceUtils.toDollars(amount))\r\n    logger.debug('priceHelpers.toDollars output:', { amount, dollars })\r\n    return dollars\r\n  },\r\n  \r\n  normalizePrice: (price) => {\r\n    logger.debug('priceHelpers.normalizePrice input:', { \r\n      price,\r\n      type: typeof price,\r\n      isInteger: Number.isInteger(price)\r\n    })\r\n    // Always ensure we're working with cents\r\n    const cents = PriceUtils.isInDollars(price) ? \r\n      PriceUtils.toCents(price) : \r\n      price\r\n    logger.debug('priceHelpers.normalizePrice output:', { price, cents })\r\n    return cents\r\n  }\r\n}\r\n\r\nexport const prepareItemsForApi = (items) => {\r\n  const companyStore = useCompanyStore()\r\n  \r\n  return items.map(item => {\r\n    // Handle price conversion\r\n    let itemPrice = item.price\r\n    if (PriceUtils.isInDollars(item.price)) {\r\n      itemPrice = PriceUtils.toCents(item.price)\r\n    } else if (item.fromHeldOrder && Number.isInteger(item.price) && item.price > 0 && item.price < 10000) {\r\n      // For held orders with small integer prices, treat as dollars\r\n      itemPrice = PriceUtils.toCents(item.price)\r\n    }\r\n      \r\n    const itemQuantity = parseInt(item.quantity)\r\n    const itemTotal = itemPrice * itemQuantity\r\n    \r\n    logger.debug('Preparing item for API:', {\r\n      id: item.id,\r\n      name: item.name,\r\n      originalPrice: item.price,\r\n      priceInCents: itemPrice,\r\n      quantity: itemQuantity,\r\n      totalInCents: itemTotal,\r\n      isDollarPrice: PriceUtils.isInDollars(item.price)\r\n    })\r\n    \r\n    return {\r\n      item_id: Number(item.id),\r\n      name: item.name,\r\n      description: item.description || null,\r\n      price: itemPrice,\r\n      quantity: itemQuantity,\r\n      unit_name: item.unit_name || 'units',\r\n      sub_total: itemTotal,\r\n      total: itemTotal,\r\n      discount: \"0\",\r\n      discount_val: 0,\r\n      discount_type: \"fixed\",\r\n      tax: priceHelpers.normalizePrice(item.tax || 0),\r\n      company_id: Number(companyStore.company?.id) || 1,\r\n      retention_amount: 0,\r\n      retention_concept: 'NO_RETENTION',\r\n      retention_percentage: 0\r\n    }\r\n  })\r\n}\r\n\r\nexport const parseOrderNotes = (notes) => {\r\n  try {\r\n    if (!notes) return ''\r\n    \r\n    const notesObj = JSON.parse(notes)\r\n    \r\n    // Handle new format\r\n    if (notesObj.customerNotes) {\r\n      return notesObj.customerNotes\r\n    }\r\n    \r\n    // Handle old format\r\n    if (notesObj.orderInfo?.customer?.notes) {\r\n      return notesObj.orderInfo.customer.notes\r\n    }\r\n    \r\n    // Handle old format with instructions\r\n    if (notesObj.orderInfo?.customer?.instructions) {\r\n      return notesObj.orderInfo.customer.instructions\r\n    }\r\n    \r\n    // If notes is a plain string, return it as is\r\n    return typeof notesObj === 'string' ? notesObj : ''\r\n  } catch (e) {\r\n    // If notes is a plain string, return it as is\r\n    return typeof notes === 'string' ? notes : ''\r\n  }\r\n}\r\n\r\nexport const getCurrentDate = () => new Date().toISOString().split('T')[0]\r\n\r\nexport const getDueDate = (daysFromNow = 7) => {\r\n  return new Date(Date.now() + daysFromNow * 24 * 60 * 60 * 1000)\r\n    .toISOString()\r\n    .split('T')[0]\r\n}\r\n","import { useCompanyStore } from '../company'\r\nimport { logger } from '../../utils/logger'\r\nimport { prepareItemsForApi, getCurrentDate, getDueDate } from './helpers'\r\nimport { PriceUtils } from '../../utils/price'\r\nimport { OrderType } from '../../types/order'\r\n\r\nexport const invoiceActions = {\r\n  // Invoice preparation actions\r\n  prepareInvoiceData(state, getters, { storeId, cashRegisterId, referenceNumber }) {\r\n    logger.startGroup('Cart Store: Prepare Invoice Data')\r\n    try {\r\n      const companyStore = useCompanyStore()\r\n      const currentCustomer = companyStore.currentCustomer\r\n\r\n      if (!currentCustomer?.id) {\r\n        throw new Error('Creator ID not found in current customer')\r\n      }\r\n\r\n      if (!storeId || !cashRegisterId) {\r\n        logger.warn('Missing store or cashier ID:', { storeId, cashRegisterId })\r\n      }\r\n\r\n      const currentDate = getCurrentDate()\r\n      const dueDate = getDueDate()\r\n      const orderType = state.type || OrderType.DINE_IN // Use type directly from state with default\r\n\r\n      // Format items with proper price conversions\r\n      const items = state.items.map(item => {\r\n        // Log original price\r\n        logger.debug('Processing item price:', {\r\n          itemId: item.id,\r\n          itemName: item.name,\r\n          originalPrice: item.price,\r\n          isInDollars: PriceUtils.isInDollars(item.price)\r\n        });\r\n\r\n        const itemPrice = PriceUtils.ensureCents(item.price)\r\n        const itemQuantity = parseInt(item.quantity)\r\n        const itemTotal = itemPrice * itemQuantity\r\n\r\n        // Log converted price\r\n        logger.debug('Price conversion result:', {\r\n          itemId: item.id,\r\n          originalPrice: item.price,\r\n          convertedPrice: itemPrice,\r\n          quantity: itemQuantity,\r\n          total: itemTotal\r\n        });\r\n\r\n        return {\r\n          item_id: Number(item.id),\r\n          name: item.name,\r\n          description: item.description || '',\r\n          price: itemPrice,\r\n          quantity: itemQuantity,\r\n          unit_name: item.unit_name || 'units',\r\n          sub_total: itemTotal,\r\n          total: itemTotal,\r\n          discount: \"0\",\r\n          discount_val: 0,\r\n          discount_type: \"fixed\",\r\n          tax: PriceUtils.ensureCents(item.tax || 0),\r\n          retention_amount: 0,\r\n          retention_concept: null,\r\n          retention_percentage: null,\r\n          retentions_id: null\r\n        }\r\n      })\r\n\r\n      // Log final items array\r\n      logger.debug('Final items array:', items.map(item => ({\r\n        id: item.item_id,\r\n        name: item.name,\r\n        price: item.price,\r\n        formattedPrice: PriceUtils.format(item.price),\r\n        total: item.total,\r\n        formattedTotal: PriceUtils.format(item.total)\r\n      })));\r\n\r\n      const invoice = {\r\n        print_pdf: false,\r\n        is_invoice_pos: 1,\r\n        is_pdf_pos: true,\r\n        avalara_bool: false,\r\n        send_email: false,\r\n        save_as_draft: false,\r\n        not_charge_automatically: false,\r\n        package_bool: false,\r\n        invoice_date: currentDate,\r\n        due_date: dueDate,\r\n        invoice_number: referenceNumber || \"-\",\r\n        user_id: Number(currentCustomer.id),\r\n        total: PriceUtils.ensureCents(getters.total),\r\n        due_amount: PriceUtils.ensureCents(getters.total),\r\n        sub_total: PriceUtils.ensureCents(getters.subtotal),\r\n        tax: PriceUtils.ensureCents(getters.taxAmount),\r\n        discount_type: state.discountType,\r\n        discount: state.discountValue.toString(),\r\n        discount_val: PriceUtils.ensureCents(getters.discountAmount),\r\n        discount_per_item: \"NO\",\r\n        items: items,\r\n        invoice_template_id: 1,\r\n        banType: true,\r\n        invoice_pbx_modify: 0,\r\n        packages: [],\r\n        cash_register_id: Number(cashRegisterId) || 1,\r\n        store_id: Number(storeId) || 1,\r\n        company_id: Number(companyStore.company?.id) || 1,\r\n        taxes: {},\r\n        notes: state.notes,\r\n        contact: {},\r\n        description: state.holdOrderDescription || referenceNumber,\r\n        retention_total: 0,\r\n        retention: \"NO\",\r\n        status: \"SENT\",\r\n        paid_status: \"UNPAID\",\r\n        tax_per_item: \"NO\",\r\n        send_sms: state.type === OrderType.DELIVERY ? (state.sendSms ? 1 : 0) : 0,\r\n        late_fee_amount: 0,\r\n        late_fee_taxes: 0,\r\n        pbx_service_price: 0,\r\n        sent: 0,\r\n        viewed: 0,\r\n        is_prepared_data: true,\r\n        type: orderType // Add type directly to invoice data\r\n      }\r\n\r\n      if (state.holdInvoiceId) {\r\n        invoice.hold_invoice_id = Number(state.holdInvoiceId)\r\n        invoice.is_hold_invoice = true\r\n      }\r\n\r\n      // Only add tables for DINE IN orders\r\n      if (orderType === OrderType.DINE_IN) {\r\n        if (state.selectedTables?.length > 0) {\r\n          const formattedTables = state.selectedTables.map(table => ({\r\n            id: table.id,\r\n            table_id: table.id,\r\n            name: table.name,\r\n            quantity: table.quantity,\r\n            in_use: 1\r\n          }))\r\n          invoice.tables_selected = formattedTables\r\n          invoice.hold_tables = formattedTables\r\n        } else {\r\n          invoice.tables_selected = []\r\n          invoice.hold_tables = []\r\n        }\r\n      }\r\n\r\n      logger.info('Invoice data prepared:', invoice)\r\n      return invoice\r\n    } catch (error) {\r\n      logger.error('Failed to prepare invoice data:', error)\r\n      throw error\r\n    } finally {\r\n      logger.endGroup()\r\n    }\r\n  },\r\n\r\n  prepareHoldInvoiceData(state, getters, { storeId, cashRegisterId, referenceNumber }) {\r\n    const data = this.prepareInvoiceData(state, getters, { storeId, cashRegisterId, referenceNumber })\r\n    return {\r\n      ...data,\r\n      is_hold_invoice: true,\r\n      hold_invoice_id: null,\r\n      // Ensure both table arrays are present in hold invoice\r\n      tables_selected: data.tables_selected || [],\r\n      hold_tables: data.tables_selected || [] // Use same data for both arrays\r\n    }\r\n  }\r\n}\r\n","import { logger } from '../utils/logger'\r\n\r\nconst CART_STORAGE_KEY = 'current-cart-state'\r\nconst CART_CHANNEL_NAME = 'pos-cart-sync'\r\n\r\ninterface CartState {\r\n  items: any[]\r\n  discountType?: string\r\n  discountValue?: number\r\n  taxRate?: number\r\n  total?: number\r\n  subtotal?: number\r\n  timestamp?: number\r\n}\r\n\r\nclass CartSyncService {\r\n  private channel: BroadcastChannel\r\n\r\n  constructor() {\r\n    this.channel = new BroadcastChannel(CART_CHANNEL_NAME)\r\n    logger.info('Cart sync service initialized')\r\n  }\r\n\r\n  // Save cart state and broadcast to other windows\r\n  saveCartState(cartState: CartState) {\r\n    try {\r\n      // Validate cart state\r\n      if (!cartState) {\r\n        logger.warn('Attempted to save null cart state')\r\n        return\r\n      }\r\n\r\n      // Deep clone the cart state to avoid reference issues\r\n      const stateToProcess = JSON.parse(JSON.stringify(cartState))\r\n\r\n      // Ensure items array exists and is properly formatted\r\n      const items = Array.isArray(stateToProcess.items) \r\n        ? stateToProcess.items.map(item => ({\r\n            id: item.id || 0,\r\n            name: item.name || '',\r\n            price: item.price || 0,\r\n            quantity: item.quantity || 1,\r\n            // Add other required item properties with defaults\r\n          }))\r\n        : []\r\n      \r\n      const stateToSave = {\r\n        items,\r\n        discountType: stateToProcess.discountType || 'fixed',\r\n        discountValue: Number(stateToProcess.discountValue) || 0,\r\n        taxRate: Number(stateToProcess.taxRate) || 0,\r\n        total: Number(stateToProcess.total) || 0,\r\n        subtotal: Number(stateToProcess.subtotal) || 0,\r\n        notes: stateToProcess.notes || '',\r\n        type: stateToProcess.type || null,\r\n        holdInvoiceId: stateToProcess.holdInvoiceId || null,\r\n        holdOrderDescription: stateToProcess.holdOrderDescription || null,\r\n        selectedTables: Array.isArray(stateToProcess.selectedTables) ? stateToProcess.selectedTables : [],\r\n        timestamp: Date.now()\r\n      }\r\n      \r\n      // Save to localStorage\r\n      localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(stateToSave))\r\n      \r\n      // Broadcast to other windows\r\n      this.channel.postMessage({\r\n        type: 'CART_UPDATED',\r\n        payload: stateToSave\r\n      })\r\n      \r\n      logger.debug('Cart state saved and broadcasted:', stateToSave)\r\n    } catch (error) {\r\n      // Enhanced error logging\r\n      logger.error('Error saving cart state:', {\r\n        error: error instanceof Error ? error.message : error,\r\n        cartState: JSON.stringify(cartState, null, 2),\r\n        stack: error instanceof Error ? error.stack : undefined\r\n      })\r\n      // Don't throw the error, just log it to prevent UI disruption\r\n    }\r\n  }\r\n\r\n  // Load cart state from localStorage\r\n  loadCartState(): CartState | null {\r\n    try {\r\n      const savedState = localStorage.getItem(CART_STORAGE_KEY)\r\n      if (savedState) {\r\n        const parsedState = JSON.parse(savedState)\r\n        // Ensure items is always an array\r\n        parsedState.items = Array.isArray(parsedState.items) ? parsedState.items : []\r\n        logger.debug('Loaded cart state:', parsedState)\r\n        return parsedState\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error loading cart state:', error)\r\n    }\r\n    // Return empty cart state if nothing is saved\r\n    return {\r\n      items: [],\r\n      discountType: null,\r\n      discountValue: 0,\r\n      taxRate: 0,\r\n      total: 0,\r\n      subtotal: 0\r\n    }\r\n  }\r\n\r\n  // Subscribe to cart updates\r\n  subscribeToUpdates(callback: (state: CartState) => void) {\r\n    const handleMessage = (event: MessageEvent) => {\r\n      if (event.data.type === 'CART_UPDATED') {\r\n        logger.debug('Received cart update:', event.data.payload)\r\n        callback(event.data.payload)\r\n      }\r\n    }\r\n\r\n    this.channel.addEventListener('message', handleMessage)\r\n    \r\n    // Return cleanup function\r\n    return () => {\r\n      this.channel.removeEventListener('message', handleMessage)\r\n      this.channel.close()\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const cartSync = new CartSyncService()\r\n","import { defineStore } from 'pinia'\r\nimport { state, mutations } from './cart/state'\r\nimport { getters } from './cart/getters'\r\nimport { actions } from './cart/actions'\r\nimport { invoiceActions } from './cart/invoice'\r\nimport { cartSync } from '../services/cartSync'\r\nimport { logger } from '../utils/logger'\r\n\r\nexport const useCartStore = defineStore('cart', {\r\n  state,\r\n  getters,\r\n  actions: {\r\n    // Initialize store with saved state\r\n    initializeFromStorage() {\r\n      const savedState = cartSync.loadCartState()\r\n      if (savedState) {\r\n        this.$patch(savedState)\r\n        logger.info('Cart initialized from storage:', savedState)\r\n      }\r\n    },\r\n\r\n    // Original actions with sync added\r\n    addItem(product, quantity = 1) {\r\n      try {\r\n        if (!product || !product.id) {\r\n          logger.warn('Invalid product data:', product)\r\n          return\r\n        }\r\n        actions.addItem(this, product, quantity)\r\n        const stateToSync = {\r\n          ...this.$state,\r\n          items: this.items.map(item => ({\r\n            id: item.id,\r\n            name: item.name,\r\n            price: item.price,\r\n            quantity: item.quantity,\r\n            // Add other required item properties\r\n          }))\r\n        }\r\n        cartSync.saveCartState(stateToSync)\r\n      } catch (error) {\r\n        logger.error('Error in addItem:', {\r\n          error,\r\n          product,\r\n          quantity,\r\n          currentState: this.$state\r\n        })\r\n      }\r\n    },\r\n\r\n    updateItemQuantity(itemId, quantity, index = null) {\r\n      actions.updateItemQuantity(this, { itemId, quantity, index })\r\n      cartSync.saveCartState(this.$state)\r\n    },\r\n\r\n    removeItem(itemId, index = null) {\r\n      actions.removeItem(this, { itemId, index })\r\n      cartSync.saveCartState(this.$state)\r\n    },\r\n\r\n    splitItem(index, splitQuantity) {\r\n      actions.splitItem(this, index, splitQuantity)\r\n      cartSync.saveCartState(this.$state)\r\n    },\r\n\r\n    // State mutations\r\n    setDiscount(type, value) {\r\n      mutations.setDiscount(this, { type, value })\r\n      cartSync.saveCartState(this.$state)\r\n    },\r\n\r\n    setNotes(notes) {\r\n      mutations.setNotes(this, notes)\r\n      cartSync.saveCartState(this.$state)\r\n    },\r\n\r\n    setType(type) {\r\n      mutations.setType(this, type)\r\n      cartSync.saveCartState(this.$state)\r\n    },\r\n\r\n    setSelectedTables(tables) {\r\n      mutations.setSelectedTables(this, tables)\r\n      cartSync.saveCartState(this.$state)\r\n    },\r\n\r\n    setHoldInvoiceId(id) {\r\n      mutations.setHoldInvoiceId(this, id)\r\n      cartSync.saveCartState(this.$state)\r\n    },\r\n\r\n    setHoldOrderDescription(description) {\r\n      mutations.setHoldOrderDescription(this, description)\r\n      cartSync.saveCartState(this.$state)\r\n    },\r\n\r\n    clearCart() {\r\n      try {\r\n        mutations.clearCart(this)\r\n        // Ensure we're passing a valid state object\r\n        const stateToSync = {\r\n          items: this.items || [],\r\n          discountType: this.discountType,\r\n          discountValue: this.discountValue || 0,\r\n          taxRate: this.taxRate || 0,\r\n          total: this.total || 0,\r\n          subtotal: this.subtotal || 0\r\n        }\r\n        cartSync.saveCartState(stateToSync)\r\n      } catch (error) {\r\n        logger.error('Error in clearCart:', error)\r\n      }\r\n    },\r\n\r\n    loadInvoice(invoice) {\r\n      actions.loadInvoice(this, invoice)\r\n      cartSync.saveCartState(this.$state)\r\n    },\r\n\r\n    async updateInvoice() {\r\n      return actions.updateInvoice(this)\r\n    },\r\n\r\n    // Invoice preparation actions\r\n    prepareInvoiceData(storeId, cashRegisterId, referenceNumber) {\r\n      return invoiceActions.prepareInvoiceData(this, this, { \r\n        storeId, \r\n        cashRegisterId, \r\n        referenceNumber \r\n      })\r\n    },\r\n\r\n    prepareHoldInvoiceData(storeId, cashRegisterId, referenceNumber) {\r\n      return invoiceActions.prepareHoldInvoiceData(this, this, {\r\n        storeId,\r\n        cashRegisterId,\r\n        referenceNumber\r\n      })\r\n    }\r\n  }\r\n})\r\n"],"names":["PriceUtils","amount","cents","cleanAmount","currency","dollars","price","value","floatValue","items","sum","item","quantity","PaidStatus","OrderType","OrderStatus","state","mutations","notes","tables","id","description","type","getters","itemTotal","itemPrice","subtotal","discount","taxableAmount","taxAmount","REQUIRED_SETTINGS","getNextNumber","key","logger","endpoint","getApiEndpoint","response","apiClient","_a","_b","error","operations","params","itemData","itemId","categories","invoiceData","formattedData","updateData","paymentData","usePosApi","posApi","actions","product","existingItem","oldQuantity","newItem","index","oldTotal","splitQuantity","originalItem","originalQuantity","remainingQuantity","removedItem","itemToRemove","discountAmount","invoice","_c","_d","_e","_f","_g","itemQuantity","companyStore","useCompanyStore","currentDate","dueDate","totalTax","totalAmount","customer","contact","itemSubtotal","itemTax","parseOrderNotes","notesObj","getCurrentDate","getDueDate","daysFromNow","invoiceActions","storeId","cashRegisterId","referenceNumber","currentCustomer","orderType","formattedTables","table","data","CART_STORAGE_KEY","CART_CHANNEL_NAME","CartSyncService","__publicField","cartState","stateToProcess","stateToSave","savedState","parsedState","callback","handleMessage","event","cartSync","useCartStore","defineStore","stateToSync"],"mappings":"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"}